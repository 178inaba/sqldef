// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:18
package sqlparser

import __yyfmt__ "fmt"

//line parser.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// forceEOF forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling forceEOF will make the lexer
// return EOF early.
func forceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

//line parser.y:53
type yySymType struct {
	yys                  int
	empty                struct{}
	statement            Statement
	selStmt              SelectStatement
	ddl                  *DDL
	ins                  *Insert
	byt                  byte
	bytes                []byte
	bytes2               [][]byte
	str                  string
	strs                 []string
	selectExprs          SelectExprs
	selectExpr           SelectExpr
	columns              Columns
	partitions           Partitions
	colName              *ColName
	tableExprs           TableExprs
	tableExpr            TableExpr
	joinCondition        JoinCondition
	tableName            TableName
	tableNames           TableNames
	indexHints           *IndexHints
	expr                 Expr
	exprs                Exprs
	boolVal              BoolVal
	colTuple             ColTuple
	values               Values
	valTuple             ValTuple
	subquery             *Subquery
	whens                []*When
	when                 *When
	orderBy              OrderBy
	order                *Order
	limit                *Limit
	updateExprs          UpdateExprs
	setExprs             SetExprs
	updateExpr           *UpdateExpr
	setExpr              *SetExpr
	colIdent             ColIdent
	colIdents            []ColIdent
	tableIdent           TableIdent
	convertType          *ConvertType
	aliasedTableName     *AliasedTableExpr
	TableSpec            *TableSpec
	columnType           ColumnType
	colKeyOpt            ColumnKeyOption
	optVal               *SQLVal
	LengthScaleOption    LengthScaleOption
	columnDefinition     *ColumnDefinition
	indexDefinition      *IndexDefinition
	indexInfo            *IndexInfo
	indexOption          *IndexOption
	indexOptions         []*IndexOption
	indexColumn          *IndexColumn
	indexColumns         []*IndexColumn
	foreignKeyDefinition *ForeignKeyDefinition
	partDefs             []*PartitionDefinition
	partDef              *PartitionDefinition
	partSpec             *PartitionSpec
	vindexParam          VindexParam
	vindexParams         []VindexParam
	showFilter           *ShowFilter
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const ALL = 57362
const DISTINCT = 57363
const AS = 57364
const EXISTS = 57365
const ASC = 57366
const DESC = 57367
const INTO = 57368
const DUPLICATE = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const KEYS = 57373
const VALUES = 57374
const LAST_INSERT_ID = 57375
const NEXT = 57376
const VALUE = 57377
const SHARE = 57378
const MODE = 57379
const SQL_NO_CACHE = 57380
const SQL_CACHE = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const USING = 57393
const ID = 57394
const HEX = 57395
const STRING = 57396
const INTEGRAL = 57397
const FLOAT = 57398
const HEXNUM = 57399
const VALUE_ARG = 57400
const LIST_ARG = 57401
const COMMENT = 57402
const COMMENT_KEYWORD = 57403
const BIT_LITERAL = 57404
const NULL = 57405
const TRUE = 57406
const FALSE = 57407
const OR = 57408
const AND = 57409
const NOT = 57410
const BETWEEN = 57411
const CASE = 57412
const WHEN = 57413
const THEN = 57414
const ELSE = 57415
const END = 57416
const LE = 57417
const GE = 57418
const NE = 57419
const NULL_SAFE_EQUAL = 57420
const IS = 57421
const LIKE = 57422
const REGEXP = 57423
const IN = 57424
const SHIFT_LEFT = 57425
const SHIFT_RIGHT = 57426
const DIV = 57427
const MOD = 57428
const UNARY = 57429
const COLLATE = 57430
const BINARY = 57431
const UNDERSCORE_BINARY = 57432
const INTERVAL = 57433
const JSON_EXTRACT_OP = 57434
const JSON_UNQUOTE_EXTRACT_OP = 57435
const CREATE = 57436
const ALTER = 57437
const DROP = 57438
const RENAME = 57439
const ANALYZE = 57440
const ADD = 57441
const SCHEMA = 57442
const TABLE = 57443
const INDEX = 57444
const VIEW = 57445
const TO = 57446
const IGNORE = 57447
const IF = 57448
const PRIMARY = 57449
const COLUMN = 57450
const CONSTRAINT = 57451
const REFERENCES = 57452
const SPATIAL = 57453
const FULLTEXT = 57454
const FOREIGN = 57455
const KEY_BLOCK_SIZE = 57456
const UNIQUE = 57457
const KEY = 57458
const SHOW = 57459
const DESCRIBE = 57460
const EXPLAIN = 57461
const DATE = 57462
const ESCAPE = 57463
const REPAIR = 57464
const OPTIMIZE = 57465
const TRUNCATE = 57466
const MAXVALUE = 57467
const PARTITION = 57468
const REORGANIZE = 57469
const LESS = 57470
const THAN = 57471
const PROCEDURE = 57472
const TRIGGER = 57473
const VINDEX = 57474
const VINDEXES = 57475
const STATUS = 57476
const VARIABLES = 57477
const RESTRICT = 57478
const CASCADE = 57479
const NO = 57480
const ACTION = 57481
const BEGIN = 57482
const START = 57483
const TRANSACTION = 57484
const COMMIT = 57485
const ROLLBACK = 57486
const BIT = 57487
const TINYINT = 57488
const SMALLINT = 57489
const SMALLSERIAL = 57490
const MEDIUMINT = 57491
const INT = 57492
const INTEGER = 57493
const SERIAL = 57494
const BIGINT = 57495
const BIGSERIAL = 57496
const INTNUM = 57497
const REAL = 57498
const DOUBLE = 57499
const PRECISION = 57500
const FLOAT_TYPE = 57501
const DECIMAL = 57502
const NUMERIC = 57503
const TIME = 57504
const TIMESTAMP = 57505
const DATETIME = 57506
const YEAR = 57507
const CHAR = 57508
const VARCHAR = 57509
const VARYING = 57510
const BOOL = 57511
const CHARACTER = 57512
const VARBINARY = 57513
const NCHAR = 57514
const UUID = 57515
const TEXT = 57516
const TINYTEXT = 57517
const MEDIUMTEXT = 57518
const LONGTEXT = 57519
const BLOB = 57520
const TINYBLOB = 57521
const MEDIUMBLOB = 57522
const LONGBLOB = 57523
const JSON = 57524
const JSONB = 57525
const ENUM = 57526
const GEOMETRY = 57527
const POINT = 57528
const LINESTRING = 57529
const POLYGON = 57530
const GEOMETRYCOLLECTION = 57531
const MULTIPOINT = 57532
const MULTILINESTRING = 57533
const MULTIPOLYGON = 57534
const ARRAY = 57535
const NULLX = 57536
const AUTO_INCREMENT = 57537
const APPROXNUM = 57538
const SIGNED = 57539
const UNSIGNED = 57540
const ZEROFILL = 57541
const ZONE = 57542
const DATABASES = 57543
const TABLES = 57544
const VITESS_KEYSPACES = 57545
const VITESS_SHARDS = 57546
const VITESS_TABLETS = 57547
const VSCHEMA_TABLES = 57548
const EXTENDED = 57549
const FULL = 57550
const PROCESSLIST = 57551
const NAMES = 57552
const CHARSET = 57553
const GLOBAL = 57554
const SESSION = 57555
const ISOLATION = 57556
const LEVEL = 57557
const READ = 57558
const WRITE = 57559
const ONLY = 57560
const REPEATABLE = 57561
const COMMITTED = 57562
const UNCOMMITTED = 57563
const SERIALIZABLE = 57564
const CURRENT_TIMESTAMP = 57565
const DATABASE = 57566
const CURRENT_DATE = 57567
const CURRENT_TIME = 57568
const LOCALTIME = 57569
const LOCALTIMESTAMP = 57570
const UTC_DATE = 57571
const UTC_TIME = 57572
const UTC_TIMESTAMP = 57573
const REPLACE = 57574
const CONVERT = 57575
const CAST = 57576
const SUBSTR = 57577
const SUBSTRING = 57578
const GROUP_CONCAT = 57579
const SEPARATOR = 57580
const MATCH = 57581
const AGAINST = 57582
const BOOLEAN = 57583
const LANGUAGE = 57584
const WITH = 57585
const WITHOUT = 57586
const PARSER = 57587
const QUERY = 57588
const EXPANSION = 57589
const UNUSED = 57590

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"SET",
	"LOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"REFERENCES",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"UNIQUE",
	"KEY",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"RESTRICT",
	"CASCADE",
	"NO",
	"ACTION",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"SMALLSERIAL",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"SERIAL",
	"BIGINT",
	"BIGSERIAL",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"PRECISION",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"VARYING",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"UUID",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"JSONB",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"ARRAY",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ZONE",
	"DATABASES",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA_TABLES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"WITHOUT",
	"PARSER",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 27,
	-2, 4,
	-1, 36,
	151, 308,
	152, 308,
	-2, 298,
	-1, 247,
	108, 628,
	-2, 624,
	-1, 248,
	108, 629,
	-2, 625,
	-1, 317,
	79, 795,
	-2, 58,
	-1, 318,
	79, 754,
	-2, 59,
	-1, 323,
	79, 738,
	-2, 595,
	-1, 325,
	79, 775,
	-2, 597,
	-1, 588,
	51, 41,
	53, 41,
	-2, 43,
	-1, 732,
	108, 631,
	-2, 627,
	-1, 952,
	5, 28,
	-2, 440,
	-1, 977,
	5, 27,
	-2, 570,
	-1, 1239,
	5, 28,
	-2, 571,
	-1, 1294,
	5, 27,
	-2, 573,
	-1, 1367,
	5, 28,
	-2, 574,
}

const yyPrivate = 57344

const yyLast = 11368

var yyAct = [...]int{

	248, 245, 893, 1373, 1357, 669, 980, 252, 1305, 794,
	535, 534, 3, 1256, 1139, 1167, 1019, 812, 277, 1140,
	1058, 834, 1136, 887, 582, 580, 830, 220, 1112, 840,
	872, 254, 833, 996, 53, 87, 757, 795, 87, 322,
	226, 767, 66, 1047, 882, 944, 1044, 598, 1245, 985,
	734, 764, 783, 468, 309, 474, 423, 584, 597, 225,
	847, 316, 87, 87, 327, 303, 569, 488, 87, 304,
	327, 221, 222, 223, 224, 791, 87, 480, 87, 250,
	766, 926, 235, 313, 87, 311, 549, 302, 52, 84,
	1404, 1385, 1401, 307, 910, 1365, 1347, 1398, 1306, 1048,
	1049, 239, 894, 1384, 1131, 1364, 1233, 909, 427, 1175,
	1161, 1308, 1022, 1023, 1024, 1162, 1163, 312, 68, 825,
	1027, 1025, 426, 82, 78, 79, 80, 826, 827, 599,
	434, 600, 435, 1004, 914, 699, 1003, 463, 442, 1005,
	1268, 1267, 700, 908, 448, 1033, 863, 861, 873, 1187,
	1283, 1186, 864, 1335, 501, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 71, 72, 512, 67,
	865, 23, 24, 48, 26, 27, 1222, 1220, 1307, 219,
	1313, 73, 459, 460, 1400, 1396, 1358, 1090, 853, 883,
	42, 905, 902, 903, 28, 901, 792, 1174, 69, 87,
	1197, 276, 849, 327, 327, 327, 327, 450, 327, 452,
	854, 1017, 1206, 37, 1198, 327, 850, 50, 1359, 1015,
	1087, 1259, 912, 915, 859, 1291, 851, 1262, 1394, 1030,
	1029, 852, 1012, 1326, 437, 430, 449, 451, 76, 813,
	815, 678, 327, 477, 75, 668, 76, 81, 995, 994,
	993, 425, 433, 444, 198, 1091, 77, 526, 527, 528,
	529, 530, 531, 532, 476, 321, 907, 524, 525, 1340,
	1242, 428, 831, 512, 1099, 849, 30, 31, 33, 32,
	35, 522, 873, 849, 856, 960, 424, 938, 706, 850,
	70, 906, 858, 857, 492, 1026, 443, 850, 703, 36,
	43, 44, 87, 868, 45, 46, 34, 1309, 57, 87,
	87, 87, 884, 814, 487, 327, 1363, 1088, 1095, 1086,
	1345, 327, 38, 39, 1336, 40, 41, 485, 1195, 911,
	447, 1089, 921, 59, 60, 61, 62, 63, 502, 983,
	307, 512, 1181, 487, 913, 1257, 1258, 1260, 1067, 436,
	849, 601, 1133, 784, 672, 843, 564, 848, 1312, 844,
	845, 1021, 482, 846, 850, 588, 505, 506, 507, 508,
	509, 502, 855, 784, 512, 967, 1369, 551, 552, 553,
	554, 555, 556, 557, 503, 504, 505, 506, 507, 508,
	509, 502, 1182, 1094, 512, 1270, 589, 741, 595, 1269,
	1053, 1051, 486, 485, 321, 321, 321, 321, 1034, 321,
	922, 739, 740, 738, 49, 957, 321, 1068, 1064, 487,
	429, 1069, 1066, 1065, 1346, 73, 327, 327, 74, 1290,
	439, 440, 441, 87, 87, 327, 1070, 87, 486, 485,
	87, 1265, 1063, 490, 87, 1135, 327, 327, 327, 327,
	327, 327, 327, 327, 50, 487, 935, 936, 937, 1343,
	327, 327, 486, 485, 737, 87, 1208, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 487,
	327, 512, 1045, 687, 87, 709, 710, 674, 675, 301,
	327, 679, 431, 432, 682, 758, 733, 759, 1031, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 735, 945, 321, 711, 956, 701,
	955, 21, 603, 1387, 1408, 685, 1173, 736, 1298, 1397,
	486, 485, 732, 327, 1387, 1386, 486, 485, 720, 1380,
	467, 478, 1172, 455, 1298, 1377, 50, 487, 1171, 771,
	776, 779, 1018, 487, 1298, 1376, 785, 728, 724, 726,
	727, 713, 1006, 725, 87, 1298, 1375, 87, 87, 87,
	87, 87, 896, 796, 730, 1298, 1355, 230, 760, 87,
	1298, 1320, 87, 1298, 467, 467, 87, 1298, 1299, 1254,
	1253, 87, 87, 771, 684, 327, 1158, 467, 307, 307,
	307, 307, 307, 683, 761, 762, 673, 319, 327, 1241,
	467, 788, 671, 307, 1190, 1189, 820, 445, 793, 772,
	773, 438, 307, 781, 1230, 780, 424, 666, 321, 1184,
	1185, 1319, 797, 1184, 1183, 800, 321, 798, 799, 787,
	801, 789, 790, 817, 809, 1318, 821, 321, 321, 321,
	321, 321, 321, 321, 321, 823, 822, 874, 875, 876,
	1137, 321, 321, 981, 818, 838, 950, 467, 1176, 87,
	566, 467, 327, 981, 327, 769, 467, 87, 819, 87,
	591, 715, 87, 327, 608, 607, 705, 592, 1113, 889,
	769, 490, 54, 1102, 321, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 885, 886, 512,
	510, 511, 503, 504, 505, 506, 507, 508, 509, 502,
	1115, 704, 512, 892, 1237, 23, 962, 593, 982, 591,
	950, 916, 23, 917, 763, 950, 918, 486, 485, 982,
	23, 941, 942, 943, 777, 777, 732, 566, 975, 959,
	777, 976, 1194, 1188, 487, 1192, 1191, 735, 1293, 1007,
	1117, 565, 1122, 927, 1116, 928, 1114, 777, 961, 566,
	736, 50, 1120, 866, 867, 869, 870, 871, 50, 1314,
	981, 824, 1118, 1119, 950, 566, 50, 670, 594, 940,
	707, 958, 879, 880, 881, 1402, 321, 1121, 1123, 934,
	1382, 1350, 1323, 977, 571, 574, 575, 576, 572, 321,
	573, 577, 1322, 232, 986, 987, 719, 327, 1321, 1277,
	87, 865, 888, 1152, 883, 998, 1010, 1000, 986, 987,
	890, 891, 1393, 466, 327, 966, 878, 877, 267, 266,
	269, 270, 271, 272, 65, 999, 949, 268, 273, 327,
	990, 307, 1311, 1193, 1137, 1008, 1011, 992, 319, 50,
	989, 681, 964, 1077, 571, 574, 575, 576, 572, 464,
	573, 577, 1001, 321, 806, 321, 804, 991, 803, 807,
	808, 805, 575, 576, 321, 204, 802, 236, 237, 1383,
	1098, 87, 327, 327, 923, 327, 1391, 1035, 1036, 1039,
	1038, 1041, 1042, 1043, 481, 1013, 1014, 1016, 321, 214,
	933, 932, 1278, 1040, 606, 469, 446, 479, 1235, 327,
	898, 680, 87, 87, 1050, 1046, 470, 1078, 1060, 1052,
	87, 579, 1080, 1073, 1074, 481, 1081, 1076, 1075, 327,
	1083, 1079, 241, 227, 1061, 1054, 931, 1108, 1109, 233,
	234, 1082, 1329, 228, 930, 54, 1328, 1072, 1281, 199,
	1126, 1127, 982, 1129, 1130, 201, 1170, 1169, 1348, 483,
	1349, 1337, 207, 203, 1028, 702, 56, 58, 1062, 327,
	327, 1196, 590, 796, 1100, 1138, 1125, 1106, 51, 796,
	1143, 1105, 1111, 1124, 1, 1141, 1071, 895, 1057, 1132,
	732, 205, 904, 1356, 209, 1304, 1160, 1166, 327, 841,
	327, 327, 832, 1146, 422, 1147, 64, 1344, 997, 1148,
	842, 1037, 839, 609, 860, 1032, 862, 615, 613, 614,
	611, 1165, 617, 1159, 616, 321, 731, 612, 610, 206,
	1164, 200, 314, 578, 602, 484, 1085, 1084, 900, 1093,
	1020, 698, 920, 462, 208, 520, 929, 1002, 320, 1144,
	708, 473, 1177, 1178, 327, 1180, 1327, 1280, 1179, 965,
	546, 782, 202, 327, 210, 211, 212, 213, 217, 253,
	723, 265, 262, 216, 215, 87, 264, 263, 714, 974,
	1199, 327, 494, 1055, 321, 251, 321, 243, 306, 1201,
	327, 562, 570, 87, 568, 567, 988, 984, 1210, 1213,
	305, 1101, 1232, 1204, 1334, 718, 25, 55, 238, 19,
	321, 1207, 18, 17, 20, 16, 15, 14, 1211, 29,
	13, 12, 11, 10, 307, 9, 8, 7, 319, 1203,
	321, 1218, 6, 5, 4, 229, 22, 2, 0, 0,
	0, 835, 0, 327, 0, 327, 327, 327, 87, 327,
	0, 1236, 321, 0, 0, 327, 0, 0, 0, 0,
	471, 475, 0, 0, 0, 0, 0, 777, 0, 0,
	1145, 997, 1250, 777, 1261, 0, 1008, 493, 1244, 0,
	0, 0, 327, 327, 87, 327, 327, 327, 0, 0,
	1252, 0, 0, 1247, 1248, 1249, 1263, 327, 0, 321,
	0, 321, 1168, 0, 1264, 1274, 1266, 1275, 0, 0,
	0, 536, 0, 0, 0, 0, 472, 0, 1284, 1285,
	547, 1286, 1287, 1288, 0, 0, 0, 0, 0, 0,
	1271, 0, 327, 327, 0, 0, 0, 1282, 1273, 0,
	731, 0, 1294, 0, 0, 327, 1141, 1292, 0, 0,
	0, 85, 0, 327, 218, 1200, 1215, 1216, 1303, 1217,
	1310, 0, 0, 1219, 1202, 1221, 0, 0, 327, 1315,
	0, 0, 278, 47, 0, 0, 242, 0, 85, 85,
	0, 1316, 1205, 1317, 85, 0, 0, 0, 0, 327,
	0, 321, 85, 0, 85, 0, 0, 1339, 1338, 0,
	85, 712, 1141, 1342, 0, 0, 0, 0, 0, 0,
	0, 1255, 327, 327, 327, 0, 1324, 1351, 0, 0,
	47, 0, 0, 0, 0, 0, 0, 0, 231, 0,
	1361, 327, 0, 0, 308, 796, 0, 1366, 327, 0,
	0, 327, 0, 0, 1246, 0, 1246, 1246, 1246, 327,
	1251, 1378, 1371, 1372, 0, 0, 321, 0, 768, 770,
	1352, 1353, 1354, 0, 0, 0, 0, 835, 0, 0,
	0, 1389, 1388, 327, 786, 1390, 0, 0, 327, 0,
	0, 0, 0, 1246, 1272, 87, 321, 321, 1276, 0,
	0, 0, 0, 327, 0, 1406, 1405, 0, 1279, 0,
	0, 0, 0, 0, 811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 721, 722,
	0, 1392, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 0, 0, 1296, 1297, 0, 0, 0, 0, 1399,
	0, 0, 0, 0, 0, 0, 1168, 0, 0, 0,
	0, 0, 0, 0, 1020, 0, 0, 453, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 1246,
	536, 512, 1104, 774, 775, 454, 454, 454, 454, 0,
	454, 0, 0, 0, 0, 0, 0, 454, 0, 0,
	1341, 0, 0, 0, 1128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 0, 0, 0, 0, 0,
	0, 0, 0, 1246, 1246, 1246, 0, 0, 85, 521,
	0, 0, 523, 0, 0, 85, 586, 85, 0, 777,
	0, 0, 1368, 0, 829, 0, 0, 0, 0, 1370,
	0, 835, 1374, 835, 0, 0, 0, 0, 0, 533,
	1381, 537, 538, 539, 540, 541, 542, 543, 544, 545,
	0, 548, 550, 550, 550, 550, 550, 550, 550, 550,
	558, 559, 560, 561, 1246, 0, 0, 0, 0, 1395,
	467, 581, 0, 0, 947, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 1374, 952, 953, 954, 0, 0,
	0, 0, 0, 0, 963, 0, 0, 0, 0, 969,
	0, 970, 971, 972, 973, 0, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 0, 0,
	512, 0, 0, 1104, 0, 0, 0, 924, 925, 0,
	475, 0, 0, 0, 0, 1229, 467, 0, 0, 85,
	85, 0, 0, 85, 0, 0, 85, 0, 0, 0,
	686, 456, 457, 458, 1227, 461, 0, 0, 0, 0,
	0, 0, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 501, 500, 510, 511, 503, 504, 505, 506,
	507, 508, 509, 502, 0, 0, 512, 0, 835, 454,
	85, 0, 951, 0, 0, 0, 0, 454, 0, 686,
	0, 0, 0, 0, 0, 0, 0, 968, 454, 454,
	454, 454, 454, 454, 454, 454, 0, 0, 1059, 835,
	0, 0, 454, 454, 0, 501, 500, 510, 511, 503,
	504, 505, 506, 507, 508, 509, 502, 0, 0, 512,
	242, 0, 0, 0, 0, 242, 242, 0, 0, 778,
	778, 242, 0, 0, 0, 778, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 242, 242, 242, 242, 0,
	85, 0, 778, 85, 85, 85, 85, 85, 0, 0,
	0, 0, 0, 0, 0, 810, 47, 0, 85, 0,
	0, 0, 586, 0, 0, 0, 0, 85, 85, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1157, 0, 0, 0, 0, 0, 0, 1226, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 308,
	308, 308, 308, 308, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 0, 816, 0, 0, 0,
	0, 0, 0, 308, 501, 500, 510, 511, 503, 504,
	505, 506, 507, 508, 509, 502, 0, 0, 512, 0,
	0, 0, 0, 0, 667, 85, 0, 0, 0, 0,
	0, 0, 677, 85, 0, 85, 0, 0, 85, 0,
	1134, 0, 0, 688, 689, 690, 691, 692, 693, 694,
	695, 0, 0, 0, 0, 1149, 1150, 696, 697, 1151,
	0, 0, 1153, 686, 0, 0, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 242, 1214, 0, 0, 0,
	0, 0, 0, 0, 454, 0, 454, 0, 1223, 1224,
	1225, 0, 0, 1228, 0, 454, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1238, 1239, 1240, 0,
	1243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 496, 242, 499,
	0, 0, 0, 0, 939, 513, 514, 515, 516, 517,
	518, 519, 0, 497, 498, 495, 501, 500, 510, 511,
	503, 504, 505, 506, 507, 508, 509, 502, 1209, 0,
	512, 0, 0, 0, 0, 0, 85, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	0, 512, 0, 0, 0, 0, 1289, 1107, 0, 0,
	0, 0, 0, 0, 978, 979, 0, 0, 1234, 0,
	0, 1300, 1301, 1302, 0, 536, 0, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	0, 512, 308, 946, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 1330, 1331,
	1332, 1333, 0, 501, 500, 510, 511, 503, 504, 505,
	506, 507, 508, 509, 502, 0, 0, 512, 0, 897,
	0, 899, 0, 0, 0, 0, 0, 0, 1096, 1097,
	919, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 0, 1362, 0,
	0, 0, 0, 1367, 0, 454, 0, 242, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 686, 0, 0,
	1379, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 454, 778, 0, 0, 0, 0, 0, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1409, 1410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1142,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1360, 536, 0, 0, 0, 1154, 1155, 1156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 141, 85,
	0, 0, 489, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 0, 0, 0, 0, 326, 0, 491, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 486,
	485, 0, 0, 0, 586, 308, 1092, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1231, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	1142, 0, 0, 1295, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 0, 154, 103, 177, 159,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1325, 0, 0, 778, 0, 0, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 1142, 0, 47, 0,
	0, 0, 0, 0, 0, 0, 0, 411, 401, 0,
	372, 413, 349, 364, 421, 365, 366, 394, 335, 380,
	141, 361, 0, 352, 330, 358, 331, 350, 374, 109,
	348, 403, 383, 121, 419, 124, 388, 0, 160, 133,
	0, 85, 376, 405, 378, 399, 371, 395, 340, 387,
	414, 362, 391, 415, 0, 0, 0, 326, 0, 836,
	837, 0, 0, 0, 0, 0, 101, 0, 390, 410,
	360, 393, 329, 389, 0, 333, 336, 420, 408, 355,
	356, 1009, 0, 0, 0, 0, 0, 0, 375, 379,
	396, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 0, 386, 1403, 0, 0, 337, 334, 0, 373,
	0, 0, 0, 339, 0, 354, 397, 0, 328, 400,
	406, 370, 185, 409, 368, 367, 147, 0, 104, 0,
	164, 113, 363, 122, 412, 377, 404, 351, 359, 105,
	357, 153, 142, 176, 385, 143, 152, 125, 168, 148,
	175, 186, 187, 166, 184, 155, 97, 139, 88, 90,
	165, 174, 102, 156, 93, 172, 162, 163, 131, 117,
	118, 158, 91, 92, 0, 151, 108, 146, 112, 107,
	140, 169, 170, 106, 195, 98, 182, 183, 95, 99,
	181, 138, 180, 167, 173, 132, 129, 94, 171, 130,
	128, 120, 0, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 332, 0, 161, 178, 196, 197,
	347, 407, 188, 189, 190, 191, 0, 0, 0, 137,
	100, 116, 157, 119, 126, 150, 194, 392, 154, 103,
	177, 159, 343, 346, 341, 342, 381, 382, 416, 417,
	418, 398, 338, 0, 344, 345, 0, 402, 384, 89,
	96, 123, 192, 193, 0, 149, 111, 179, 411, 401,
	0, 372, 413, 349, 364, 421, 365, 366, 394, 335,
	380, 141, 361, 0, 352, 330, 358, 331, 350, 374,
	109, 348, 403, 383, 121, 419, 124, 388, 0, 160,
	133, 0, 0, 376, 405, 378, 399, 371, 395, 340,
	387, 414, 362, 391, 415, 0, 0, 0, 326, 0,
	836, 837, 0, 0, 0, 0, 0, 101, 0, 390,
	410, 360, 393, 329, 389, 0, 333, 336, 420, 408,
	355, 356, 0, 0, 0, 0, 0, 0, 0, 375,
	379, 396, 369, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 0, 386, 0, 0, 0, 337, 334, 0,
	373, 0, 0, 0, 339, 0, 354, 397, 0, 328,
	400, 406, 370, 185, 409, 368, 367, 147, 0, 104,
	0, 164, 113, 363, 122, 412, 377, 404, 351, 359,
	105, 357, 153, 142, 176, 385, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 332, 0, 161, 178, 196,
	197, 347, 407, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 392, 154,
	103, 177, 159, 343, 346, 341, 342, 381, 382, 416,
	417, 418, 398, 338, 0, 344, 345, 0, 402, 384,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 411,
	401, 0, 372, 413, 349, 364, 421, 365, 366, 394,
	335, 380, 141, 361, 0, 352, 330, 358, 331, 350,
	374, 109, 348, 403, 383, 121, 419, 124, 388, 0,
	160, 133, 0, 0, 376, 405, 378, 399, 371, 395,
	340, 387, 414, 362, 391, 415, 0, 0, 0, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	390, 410, 360, 393, 329, 389, 0, 333, 336, 420,
	408, 355, 356, 0, 0, 0, 0, 0, 0, 0,
	375, 379, 396, 369, 0, 0, 0, 0, 0, 0,
	1103, 0, 353, 0, 386, 0, 0, 0, 337, 334,
	0, 373, 0, 0, 0, 339, 0, 354, 397, 0,
	328, 400, 406, 370, 185, 409, 368, 367, 147, 0,
	104, 0, 164, 113, 363, 122, 412, 377, 404, 351,
	359, 105, 357, 153, 142, 176, 385, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 0, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 332, 0, 161, 178,
	196, 197, 347, 407, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 392,
	154, 103, 177, 159, 343, 346, 341, 342, 381, 382,
	416, 417, 418, 398, 338, 0, 344, 345, 0, 402,
	384, 89, 96, 123, 192, 193, 0, 149, 111, 179,
	411, 401, 0, 372, 413, 349, 364, 421, 365, 366,
	394, 335, 380, 141, 361, 0, 352, 330, 358, 331,
	350, 374, 109, 348, 403, 383, 121, 419, 124, 388,
	0, 160, 133, 0, 0, 376, 405, 378, 399, 371,
	395, 340, 387, 414, 362, 391, 415, 50, 0, 0,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 390, 410, 360, 393, 329, 389, 0, 333, 336,
	420, 408, 355, 356, 0, 0, 0, 0, 0, 0,
	0, 375, 379, 396, 369, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 0, 386, 0, 0, 0, 337,
	334, 0, 373, 0, 0, 0, 339, 0, 354, 397,
	0, 328, 400, 406, 370, 185, 409, 368, 367, 147,
	0, 104, 0, 164, 113, 363, 122, 412, 377, 404,
	351, 359, 105, 357, 153, 142, 176, 385, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 0, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 332, 0, 161,
	178, 196, 197, 347, 407, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	392, 154, 103, 177, 159, 343, 346, 341, 342, 381,
	382, 416, 417, 418, 398, 338, 0, 344, 345, 0,
	402, 384, 89, 96, 123, 192, 193, 0, 149, 111,
	179, 411, 401, 0, 372, 413, 349, 364, 421, 365,
	366, 394, 335, 380, 141, 361, 0, 352, 330, 358,
	331, 350, 374, 109, 348, 403, 383, 121, 419, 124,
	388, 0, 160, 133, 0, 0, 376, 405, 378, 399,
	371, 395, 340, 387, 414, 362, 391, 415, 0, 0,
	0, 247, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 390, 410, 360, 393, 329, 389, 0, 333,
	336, 420, 408, 355, 356, 0, 0, 0, 0, 0,
	0, 0, 375, 379, 396, 369, 0, 0, 0, 0,
	0, 0, 729, 0, 353, 0, 386, 0, 0, 0,
	337, 334, 0, 373, 0, 0, 0, 339, 0, 354,
	397, 0, 328, 400, 406, 370, 185, 409, 368, 367,
	147, 0, 104, 0, 164, 113, 363, 122, 412, 377,
	404, 351, 359, 105, 357, 153, 142, 176, 385, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 332, 0,
	161, 178, 196, 197, 347, 407, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 392, 154, 103, 177, 159, 343, 346, 341, 342,
	381, 382, 416, 417, 418, 398, 338, 0, 344, 345,
	0, 402, 384, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 411, 401, 0, 372, 413, 349, 364, 421,
	365, 366, 394, 335, 380, 141, 361, 0, 352, 330,
	358, 331, 350, 374, 109, 348, 403, 383, 121, 419,
	124, 388, 0, 160, 133, 0, 0, 376, 405, 378,
	399, 371, 395, 340, 387, 414, 362, 391, 415, 0,
	0, 0, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 390, 410, 360, 393, 329, 389, 0,
	333, 336, 420, 408, 355, 356, 0, 0, 0, 0,
	0, 0, 0, 375, 379, 396, 369, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 0, 386, 0, 0,
	0, 337, 334, 0, 373, 0, 0, 0, 339, 0,
	354, 397, 0, 328, 400, 406, 370, 185, 409, 368,
	367, 147, 0, 104, 0, 164, 113, 363, 122, 412,
	377, 404, 351, 359, 105, 357, 153, 142, 176, 385,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 332,
	0, 161, 178, 196, 197, 347, 407, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 392, 154, 103, 177, 159, 343, 346, 341,
	342, 381, 382, 416, 417, 418, 398, 338, 0, 344,
	345, 0, 402, 384, 89, 96, 123, 192, 193, 0,
	149, 111, 179, 411, 401, 0, 372, 413, 349, 364,
	421, 365, 366, 394, 335, 380, 141, 361, 0, 352,
	330, 358, 331, 350, 374, 109, 348, 403, 383, 121,
	419, 124, 388, 0, 160, 133, 0, 0, 376, 405,
	378, 399, 371, 395, 340, 387, 414, 362, 391, 415,
	0, 0, 0, 247, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 390, 410, 360, 393, 329, 389,
	0, 333, 336, 420, 408, 355, 356, 0, 0, 0,
	0, 0, 0, 0, 375, 379, 396, 369, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 0, 386, 0,
	0, 0, 337, 334, 0, 373, 0, 0, 0, 339,
	0, 354, 397, 0, 328, 400, 406, 370, 185, 409,
	368, 367, 147, 0, 104, 0, 164, 113, 363, 122,
	412, 377, 404, 351, 359, 105, 357, 153, 142, 176,
	385, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	332, 0, 161, 178, 196, 197, 347, 407, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 392, 154, 103, 177, 159, 343, 346,
	341, 342, 381, 382, 416, 417, 418, 398, 338, 0,
	344, 345, 0, 402, 384, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 411, 401, 0, 372, 413, 349,
	364, 421, 365, 366, 394, 335, 380, 141, 361, 0,
	352, 330, 358, 331, 350, 374, 109, 348, 403, 383,
	121, 419, 124, 388, 0, 160, 133, 0, 0, 376,
	405, 378, 399, 371, 395, 340, 387, 414, 362, 391,
	415, 0, 0, 0, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 390, 410, 360, 393, 329,
	389, 0, 333, 336, 420, 408, 355, 356, 0, 0,
	0, 0, 0, 0, 0, 375, 379, 396, 369, 0,
	0, 0, 0, 0, 0, 0, 0, 353, 0, 386,
	0, 0, 0, 337, 334, 0, 373, 0, 0, 0,
	339, 0, 354, 397, 0, 328, 400, 406, 370, 185,
	409, 368, 367, 147, 0, 104, 0, 164, 113, 363,
	122, 412, 377, 404, 351, 359, 105, 357, 153, 142,
	176, 385, 143, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 324, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 0,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 332, 0, 161, 178, 196, 197, 347, 407, 188,
	189, 190, 191, 0, 0, 0, 325, 323, 116, 157,
	119, 126, 150, 194, 392, 154, 103, 177, 159, 343,
	346, 341, 342, 381, 382, 416, 417, 418, 398, 338,
	0, 344, 345, 0, 402, 384, 89, 96, 123, 192,
	193, 0, 149, 111, 179, 411, 401, 0, 372, 413,
	349, 364, 421, 365, 366, 394, 335, 380, 141, 361,
	0, 352, 330, 358, 331, 350, 374, 109, 348, 403,
	383, 121, 419, 124, 388, 0, 160, 133, 0, 0,
	376, 405, 378, 399, 371, 395, 340, 387, 414, 362,
	391, 415, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 390, 410, 360, 393,
	329, 389, 0, 333, 336, 420, 408, 355, 356, 0,
	0, 0, 0, 0, 0, 0, 375, 379, 396, 369,
	0, 0, 0, 0, 0, 0, 0, 0, 353, 0,
	386, 0, 0, 0, 337, 334, 0, 373, 0, 0,
	0, 339, 0, 354, 397, 0, 328, 400, 406, 370,
	185, 409, 368, 367, 147, 0, 104, 0, 164, 113,
	363, 122, 412, 377, 404, 351, 359, 105, 357, 153,
	142, 176, 385, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 332, 0, 161, 178, 196, 197, 347, 407,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 392, 154, 103, 177, 159,
	343, 346, 341, 342, 381, 382, 416, 417, 418, 398,
	338, 0, 344, 345, 0, 402, 384, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 411, 401, 0, 372,
	413, 349, 364, 421, 365, 366, 394, 335, 380, 141,
	361, 0, 352, 330, 358, 331, 350, 374, 109, 348,
	403, 383, 121, 419, 124, 388, 0, 160, 133, 0,
	0, 376, 405, 378, 399, 371, 395, 340, 387, 414,
	362, 391, 415, 0, 0, 0, 326, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 390, 410, 360,
	393, 329, 389, 0, 333, 336, 420, 408, 355, 356,
	0, 0, 0, 0, 0, 0, 0, 375, 379, 396,
	369, 0, 0, 0, 0, 0, 0, 0, 0, 353,
	0, 386, 0, 0, 0, 337, 334, 0, 373, 0,
	0, 0, 339, 0, 354, 397, 0, 328, 400, 406,
	370, 185, 409, 368, 367, 147, 0, 104, 0, 164,
	113, 363, 122, 412, 377, 404, 351, 359, 105, 357,
	153, 142, 176, 385, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	596, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 324, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 332, 0, 161, 178, 196, 197, 347,
	407, 188, 189, 190, 191, 0, 0, 0, 325, 323,
	116, 157, 119, 126, 150, 194, 392, 154, 103, 177,
	159, 343, 346, 341, 342, 381, 382, 416, 417, 418,
	398, 338, 0, 344, 345, 0, 402, 384, 89, 96,
	123, 192, 193, 0, 149, 111, 179, 411, 401, 0,
	372, 413, 349, 364, 421, 365, 366, 394, 335, 380,
	141, 361, 0, 352, 330, 358, 331, 350, 374, 109,
	348, 403, 383, 121, 419, 124, 388, 0, 160, 133,
	0, 0, 376, 405, 378, 399, 371, 395, 340, 387,
	414, 362, 391, 415, 0, 0, 0, 326, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 390, 410,
	360, 393, 329, 389, 0, 333, 336, 420, 408, 355,
	356, 0, 0, 0, 0, 0, 0, 0, 375, 379,
	396, 369, 0, 0, 0, 0, 0, 0, 0, 0,
	353, 0, 386, 0, 0, 0, 337, 334, 0, 373,
	0, 0, 0, 339, 0, 354, 397, 0, 328, 400,
	406, 370, 185, 409, 368, 367, 147, 0, 104, 0,
	164, 113, 363, 122, 412, 377, 404, 351, 359, 105,
	357, 153, 142, 176, 385, 143, 152, 125, 168, 148,
	175, 186, 187, 166, 184, 155, 97, 139, 88, 90,
	165, 315, 102, 156, 93, 172, 162, 163, 131, 117,
	118, 158, 91, 92, 0, 151, 108, 146, 112, 107,
	140, 169, 170, 106, 195, 98, 182, 183, 95, 324,
	181, 138, 180, 167, 173, 132, 129, 94, 171, 130,
	128, 120, 0, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 332, 0, 161, 178, 196, 197,
	347, 407, 188, 189, 190, 191, 0, 0, 0, 325,
	323, 318, 317, 119, 126, 150, 194, 392, 154, 103,
	177, 159, 343, 346, 341, 342, 381, 382, 416, 417,
	418, 398, 338, 0, 344, 345, 0, 402, 384, 89,
	96, 123, 192, 193, 0, 149, 111, 179, 141, 0,
	0, 765, 0, 249, 0, 0, 0, 109, 246, 0,
	0, 121, 288, 124, 0, 0, 160, 133, 0, 0,
	0, 0, 279, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 247, 267, 266, 269, 270,
	271, 272, 0, 0, 101, 268, 273, 274, 275, 0,
	0, 244, 260, 0, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 257, 258, 240, 0, 0, 0,
	299, 0, 259, 0, 0, 255, 256, 261, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 297, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 0, 154, 103, 177, 159,
	289, 298, 295, 296, 293, 294, 292, 291, 290, 300,
	281, 282, 283, 284, 286, 0, 285, 89, 96, 123,
	192, 193, 141, 149, 111, 179, 0, 249, 0, 0,
	0, 109, 246, 0, 0, 121, 288, 124, 0, 0,
	160, 133, 0, 0, 0, 0, 279, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 0, 467, 247,
	267, 266, 269, 270, 271, 272, 0, 0, 101, 268,
	273, 274, 275, 0, 0, 244, 260, 0, 287, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 257, 258,
	0, 0, 0, 0, 299, 0, 259, 0, 0, 255,
	256, 261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 297, 147, 0,
	104, 0, 164, 113, 0, 122, 0, 0, 0, 0,
	0, 105, 0, 153, 142, 176, 0, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 0, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 0, 0, 0, 0, 161, 178,
	196, 197, 0, 0, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 0,
	154, 103, 177, 159, 289, 298, 295, 296, 293, 294,
	292, 291, 290, 300, 281, 282, 283, 284, 286, 0,
	285, 89, 96, 123, 192, 193, 141, 149, 111, 179,
	0, 249, 0, 0, 0, 109, 246, 0, 0, 121,
	288, 124, 0, 0, 160, 133, 0, 0, 0, 0,
	279, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 247, 267, 266, 269, 270, 271, 272,
	0, 0, 101, 268, 273, 274, 275, 0, 0, 244,
	260, 0, 287, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 257, 258, 240, 0, 0, 0, 299, 0,
	259, 0, 0, 255, 256, 261, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 297, 147, 0, 104, 0, 164, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 153, 142, 176,
	0, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 0, 154, 103, 177, 159, 289, 298,
	295, 296, 293, 294, 292, 291, 290, 300, 281, 282,
	283, 284, 286, 0, 285, 89, 96, 123, 192, 193,
	141, 149, 111, 179, 0, 249, 0, 0, 0, 109,
	246, 0, 0, 121, 288, 124, 0, 0, 160, 133,
	0, 0, 0, 0, 279, 280, 0, 0, 0, 0,
	0, 0, 828, 0, 50, 0, 0, 247, 267, 266,
	269, 270, 271, 272, 0, 0, 101, 268, 273, 274,
	275, 0, 0, 244, 260, 0, 287, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 257, 258, 0, 0,
	0, 0, 299, 0, 259, 0, 0, 255, 256, 261,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 0, 0, 297, 147, 0, 104, 0,
	164, 113, 0, 122, 0, 0, 0, 0, 0, 105,
	0, 153, 142, 176, 0, 143, 152, 125, 168, 148,
	175, 186, 187, 166, 184, 155, 97, 139, 88, 90,
	165, 174, 102, 156, 93, 172, 162, 163, 131, 117,
	118, 158, 91, 92, 0, 151, 108, 146, 112, 107,
	140, 169, 170, 106, 195, 98, 182, 183, 95, 99,
	181, 138, 180, 167, 173, 132, 129, 94, 171, 130,
	128, 120, 0, 110, 114, 144, 127, 145, 115, 135,
	134, 136, 0, 0, 0, 0, 161, 178, 196, 197,
	0, 0, 188, 189, 190, 191, 0, 0, 0, 137,
	100, 116, 157, 119, 126, 150, 194, 0, 154, 103,
	177, 159, 289, 298, 295, 296, 293, 294, 292, 291,
	290, 300, 281, 282, 283, 284, 286, 23, 285, 89,
	96, 123, 192, 193, 0, 149, 111, 179, 0, 141,
	0, 0, 0, 0, 249, 0, 0, 0, 109, 246,
	0, 0, 121, 288, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 279, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 247, 267, 266, 269,
	270, 271, 272, 0, 0, 101, 268, 273, 274, 275,
	0, 0, 244, 260, 0, 287, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 257, 258, 0, 0, 0,
	0, 299, 0, 259, 0, 0, 255, 256, 261, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 297, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 289, 298, 295, 296, 293, 294, 292, 291, 290,
	300, 281, 282, 283, 284, 286, 0, 285, 89, 96,
	123, 192, 193, 141, 149, 111, 179, 0, 249, 0,
	0, 0, 109, 246, 0, 0, 121, 288, 124, 0,
	0, 160, 133, 0, 0, 0, 0, 279, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 0, 0,
	247, 267, 266, 269, 270, 271, 272, 0, 0, 101,
	268, 273, 274, 275, 0, 0, 244, 260, 0, 287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 257,
	258, 0, 0, 0, 0, 299, 0, 259, 0, 0,
	255, 256, 261, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 297, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 0, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 289, 298, 295, 296, 293,
	294, 292, 291, 290, 300, 281, 282, 283, 284, 286,
	0, 285, 89, 96, 123, 192, 193, 141, 149, 111,
	179, 0, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 288, 124, 0, 0, 160, 133, 0, 0, 0,
	0, 279, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 0, 247, 267, 266, 269, 270, 271,
	272, 0, 0, 101, 268, 273, 274, 275, 0, 0,
	0, 260, 0, 287, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 257, 258, 0, 0, 0, 0, 299,
	0, 259, 0, 0, 255, 256, 261, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 297, 147, 0, 104, 0, 164, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 153, 142,
	176, 1407, 143, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 99, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 0,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 0, 161, 178, 196, 197, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 0, 154, 103, 177, 159, 289,
	298, 295, 296, 293, 294, 292, 291, 290, 300, 281,
	282, 283, 284, 286, 0, 285, 89, 96, 123, 192,
	193, 141, 149, 111, 179, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 288, 124, 0, 0, 160,
	133, 0, 0, 0, 0, 279, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 0, 247, 267,
	266, 269, 270, 271, 272, 0, 0, 101, 268, 273,
	274, 275, 0, 0, 0, 260, 0, 287, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 257, 258, 0,
	0, 0, 0, 299, 0, 259, 0, 0, 255, 256,
	261, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 297, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 0, 154,
	103, 177, 159, 289, 298, 295, 296, 293, 294, 292,
	291, 290, 300, 281, 282, 283, 284, 286, 0, 285,
	89, 96, 123, 192, 193, 141, 149, 111, 179, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 326, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 501, 500, 510,
	511, 503, 504, 505, 506, 507, 508, 509, 502, 0,
	0, 512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 0, 154, 103, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 96, 123, 192, 193, 141,
	149, 111, 179, 585, 0, 0, 0, 0, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 587, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 89, 96,
	123, 192, 193, 109, 149, 111, 179, 121, 0, 124,
	0, 0, 160, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 0,
	0, 326, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 0, 154, 103, 177, 159, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 0, 0, 89, 96, 123, 192, 193, 109, 149,
	111, 179, 121, 0, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 141, 154, 103, 177,
	159, 0, 0, 0, 0, 109, 0, 0, 0, 121,
	0, 124, 0, 0, 160, 133, 0, 0, 89, 96,
	123, 192, 193, 0, 149, 111, 179, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 716, 0, 0, 717,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 185, 0,
	0, 0, 147, 0, 104, 0, 164, 113, 0, 122,
	0, 0, 0, 0, 0, 105, 0, 153, 142, 176,
	0, 143, 152, 125, 168, 148, 175, 186, 187, 166,
	184, 155, 97, 139, 88, 90, 165, 174, 102, 156,
	93, 172, 162, 163, 131, 117, 118, 158, 91, 92,
	0, 151, 108, 146, 112, 107, 140, 169, 170, 106,
	195, 98, 182, 183, 95, 99, 181, 138, 180, 167,
	173, 132, 129, 94, 171, 130, 128, 120, 0, 110,
	114, 144, 127, 145, 115, 135, 134, 136, 0, 0,
	0, 0, 161, 178, 196, 197, 0, 0, 188, 189,
	190, 191, 0, 0, 0, 137, 100, 116, 157, 119,
	126, 150, 194, 141, 154, 103, 177, 159, 0, 0,
	0, 0, 109, 605, 0, 0, 121, 0, 124, 0,
	0, 160, 133, 0, 0, 89, 96, 123, 192, 193,
	0, 149, 111, 179, 0, 0, 0, 0, 0, 0,
	326, 0, 604, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 0, 0, 0, 147,
	0, 104, 0, 164, 113, 0, 122, 0, 0, 0,
	0, 0, 105, 0, 153, 142, 176, 0, 143, 152,
	125, 168, 148, 175, 186, 187, 166, 184, 155, 97,
	139, 88, 90, 165, 174, 102, 156, 93, 172, 162,
	163, 131, 117, 118, 158, 91, 92, 0, 151, 108,
	146, 112, 107, 140, 169, 170, 106, 195, 98, 182,
	183, 95, 99, 181, 138, 180, 167, 173, 132, 129,
	94, 171, 130, 128, 120, 0, 110, 114, 144, 127,
	145, 115, 135, 134, 136, 0, 0, 0, 0, 161,
	178, 196, 197, 0, 0, 188, 189, 190, 191, 0,
	0, 0, 137, 100, 116, 157, 119, 126, 150, 194,
	0, 154, 103, 177, 159, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 96, 123, 192, 193, 141, 149, 111,
	179, 585, 0, 0, 0, 0, 109, 0, 0, 0,
	121, 0, 124, 0, 0, 160, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 587, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	0, 0, 0, 147, 0, 104, 0, 164, 113, 0,
	122, 0, 0, 0, 0, 0, 105, 0, 153, 142,
	176, 0, 583, 152, 125, 168, 148, 175, 186, 187,
	166, 184, 155, 97, 139, 88, 90, 165, 174, 102,
	156, 93, 172, 162, 163, 131, 117, 118, 158, 91,
	92, 0, 151, 108, 146, 112, 107, 140, 169, 170,
	106, 195, 98, 182, 183, 95, 99, 181, 138, 180,
	167, 173, 132, 129, 94, 171, 130, 128, 120, 0,
	110, 114, 144, 127, 145, 115, 135, 134, 136, 0,
	0, 0, 0, 161, 178, 196, 197, 0, 0, 188,
	189, 190, 191, 0, 0, 0, 137, 100, 116, 157,
	119, 126, 150, 194, 141, 154, 103, 177, 159, 0,
	0, 0, 0, 109, 0, 0, 0, 121, 0, 124,
	0, 0, 160, 133, 0, 0, 89, 96, 123, 192,
	193, 0, 149, 111, 179, 0, 0, 0, 50, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 141, 154, 103, 177, 159, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 0, 0, 0, 0, 0, 0, 86, 0,
	587, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 326, 0, 491, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 141, 154, 103, 177, 159,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 676, 154, 103, 177, 159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 96, 123, 192, 193, 141,
	149, 111, 179, 0, 0, 0, 0, 563, 109, 0,
	0, 0, 121, 0, 124, 0, 0, 160, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 0, 0, 0, 147, 0, 104, 0, 164,
	113, 0, 122, 0, 0, 0, 0, 0, 105, 0,
	153, 142, 176, 0, 143, 152, 125, 168, 148, 175,
	186, 187, 166, 184, 155, 97, 139, 88, 90, 165,
	174, 102, 156, 93, 172, 162, 163, 131, 117, 118,
	158, 91, 92, 0, 151, 108, 146, 112, 107, 140,
	169, 170, 106, 195, 98, 182, 183, 95, 99, 181,
	138, 180, 167, 173, 132, 129, 94, 171, 130, 128,
	120, 0, 110, 114, 144, 127, 145, 115, 135, 134,
	136, 0, 0, 0, 0, 161, 178, 196, 197, 0,
	0, 188, 189, 190, 191, 0, 0, 0, 137, 100,
	116, 157, 119, 126, 150, 194, 0, 154, 103, 177,
	159, 0, 0, 0, 0, 0, 0, 310, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 89, 96,
	123, 192, 193, 109, 149, 111, 179, 121, 0, 124,
	0, 0, 160, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 0, 0, 0,
	147, 0, 104, 0, 164, 113, 0, 122, 0, 0,
	0, 0, 0, 105, 0, 153, 142, 176, 0, 143,
	152, 125, 168, 148, 175, 186, 187, 166, 184, 155,
	97, 139, 88, 90, 165, 174, 102, 156, 93, 172,
	162, 163, 131, 117, 118, 158, 91, 92, 0, 151,
	108, 146, 112, 107, 140, 169, 170, 106, 195, 98,
	182, 183, 95, 99, 181, 138, 180, 167, 173, 132,
	129, 94, 171, 130, 128, 120, 0, 110, 114, 144,
	127, 145, 115, 135, 134, 136, 0, 0, 0, 0,
	161, 178, 196, 197, 0, 0, 188, 189, 190, 191,
	0, 0, 0, 137, 100, 116, 157, 119, 126, 150,
	194, 141, 154, 103, 177, 159, 0, 0, 0, 0,
	109, 0, 0, 0, 121, 0, 124, 0, 0, 160,
	133, 0, 0, 89, 96, 123, 192, 193, 0, 149,
	111, 179, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 185, 0, 0, 0, 147, 0, 104,
	0, 164, 113, 0, 122, 0, 0, 0, 0, 0,
	105, 0, 153, 142, 176, 0, 143, 152, 125, 168,
	148, 175, 186, 187, 166, 184, 155, 97, 139, 88,
	90, 165, 174, 102, 156, 93, 172, 162, 163, 131,
	117, 118, 158, 91, 92, 0, 151, 108, 146, 112,
	107, 140, 169, 170, 106, 195, 98, 182, 183, 95,
	99, 181, 138, 180, 167, 173, 132, 129, 94, 171,
	130, 128, 120, 0, 110, 114, 144, 127, 145, 115,
	135, 134, 136, 0, 0, 0, 0, 161, 178, 196,
	197, 0, 0, 188, 189, 190, 191, 0, 0, 0,
	137, 100, 116, 157, 119, 126, 150, 194, 141, 154,
	103, 177, 159, 0, 0, 0, 0, 109, 0, 0,
	0, 121, 0, 124, 0, 0, 160, 133, 0, 0,
	89, 96, 123, 192, 193, 0, 149, 111, 179, 0,
	0, 0, 0, 0, 0, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 0, 0, 0, 147, 0, 104, 0, 164, 113,
	0, 122, 0, 0, 0, 0, 0, 105, 0, 153,
	142, 176, 0, 143, 152, 125, 168, 148, 175, 186,
	187, 166, 184, 155, 97, 139, 88, 90, 165, 174,
	102, 156, 93, 172, 162, 163, 131, 117, 118, 158,
	91, 92, 0, 151, 108, 146, 112, 107, 140, 169,
	170, 106, 195, 98, 182, 183, 95, 99, 181, 138,
	180, 167, 173, 132, 129, 94, 171, 130, 128, 120,
	0, 110, 114, 144, 127, 145, 115, 135, 134, 136,
	0, 0, 0, 0, 161, 178, 196, 197, 0, 0,
	188, 189, 190, 191, 0, 0, 0, 137, 100, 116,
	157, 119, 126, 150, 194, 141, 154, 103, 177, 159,
	0, 0, 0, 0, 109, 0, 0, 0, 121, 0,
	124, 0, 0, 160, 133, 0, 0, 89, 96, 123,
	192, 193, 0, 149, 111, 179, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 0, 0,
	0, 147, 0, 104, 0, 164, 113, 0, 122, 0,
	0, 0, 0, 0, 105, 0, 153, 142, 176, 0,
	143, 152, 125, 168, 148, 175, 186, 187, 166, 184,
	155, 97, 139, 88, 90, 165, 174, 102, 156, 93,
	172, 162, 163, 131, 117, 118, 158, 91, 92, 0,
	151, 108, 146, 112, 107, 140, 169, 170, 106, 195,
	98, 182, 183, 95, 99, 181, 138, 180, 167, 173,
	132, 129, 94, 171, 130, 128, 120, 0, 110, 114,
	144, 127, 145, 115, 135, 134, 136, 0, 0, 0,
	0, 161, 178, 196, 197, 0, 0, 188, 189, 190,
	191, 0, 0, 0, 137, 100, 116, 157, 119, 126,
	150, 194, 141, 154, 103, 177, 159, 0, 0, 0,
	0, 109, 0, 0, 0, 121, 0, 124, 0, 0,
	160, 133, 0, 0, 89, 96, 123, 192, 193, 0,
	149, 111, 179, 0, 0, 0, 0, 0, 0, 247,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 147, 0,
	104, 0, 164, 113, 0, 122, 0, 0, 637, 0,
	0, 105, 0, 153, 142, 176, 0, 143, 152, 125,
	168, 148, 175, 186, 187, 166, 184, 155, 97, 139,
	88, 90, 165, 174, 102, 156, 93, 172, 162, 163,
	131, 117, 118, 158, 91, 92, 0, 151, 108, 146,
	112, 107, 140, 169, 170, 106, 195, 98, 182, 183,
	95, 99, 181, 138, 180, 167, 173, 132, 129, 94,
	171, 130, 128, 120, 0, 110, 114, 144, 127, 145,
	115, 135, 134, 136, 623, 0, 0, 0, 161, 178,
	196, 197, 0, 0, 188, 189, 190, 191, 0, 0,
	0, 137, 100, 116, 157, 119, 126, 150, 194, 0,
	154, 103, 177, 159, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 96, 123, 192, 193, 0, 149, 111, 179,
	0, 651, 652, 653, 654, 655, 656, 657, 658, 659,
	660, 0, 661, 662, 0, 663, 664, 665, 639, 640,
	641, 642, 620, 622, 0, 618, 621, 624, 0, 635,
	625, 626, 627, 628, 629, 630, 631, 632, 633, 634,
	636, 643, 644, 645, 646, 647, 648, 649, 650, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 619,
}
var yyPact = [...]int{

	165, -1000, -178, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 940, 971, -1000, -1000, -1000, -1000, -1000, -1000, 792,
	49, 124, 138, 6, 10353, 136, 854, 10787, -1000, 20,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 734, -1000, -1000,
	-1000, -1000, -1000, 926, 937, 807, 929, 849, -1000, 5928,
	116, 9006, 10136, 5192, -1000, 571, 132, 10787, -141, 10570,
	112, 112, 112, -1000, 134, 10787, -1000, 10787, 111, 566,
	111, 111, 111, 10787, -1000, 188, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10787, 562,
	887, 89, 3365, 3365, 3365, 3365, 31, 3365, -88, 819,
	-1000, -1000, -1000, -1000, 3365, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 531, 896, 6665, 6665, 940,
	-1000, 734, -1000, -1000, -1000, 883, -1000, -1000, 299, 958,
	-1000, 2310, 186, -1000, 6665, 1936, 494, -1000, -1000, 494,
	-1000, -1000, 158, -1000, -1000, 7153, 7153, 7153, 7153, 7153,
	7153, 7153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 494, -1000, 6421, 494,
	494, 494, 494, 494, 494, 494, 494, 6665, 494, 494,
	494, 494, 494, 494, 494, 494, 494, 494, 494, 494,
	494, 9901, 732, 824, -1000, -1000, -1000, 909, 8111, 8789,
	10787, 676, -1000, 735, 4931, -102, -1000, -1000, -1000, 272,
	8545, -1000, -1000, -1000, 885, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 631, -1000, 11109, 10570, 3365, 125, 736, 557,
	283, 551, 10787, 9657, 3365, 120, 10787, 898, 811, 10787,
	548, 539, -1000, 4670, -1000, 3365, 3365, 3365, 3365, 3365,
	3365, 3365, 3365, -1000, -1000, -1000, -1000, -1000, -1000, 3365,
	3365, -1000, -84, -1000, 10787, -1000, -1000, -1000, -1000, 966,
	209, 668, 180, 737, -1000, 461, 926, 531, 849, 8328,
	775, -1000, -1000, 10787, -1000, 6665, 6665, 492, -1000, 9440,
	-1000, -1000, 3626, 228, 7153, 402, 324, 7153, 7153, 7153,
	7153, 7153, 7153, 7153, 7153, 7153, 7153, 7153, 7153, 7153,
	7153, 7153, 440, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 523, -1000, 734, 782, 782, 169, 169, 169, 169,
	169, 169, 7397, 5440, 531, 622, 333, 6421, 5928, 5928,
	6665, 6665, 11004, 11004, 5928, 914, 278, 333, 11004, -1000,
	531, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5928, 5928,
	5928, 5928, 53, 10787, -1000, 11004, 9006, 9006, 9006, 9006,
	9006, -1000, 846, 838, -1000, 836, 834, 840, 10787, -1000,
	617, 8111, 191, 494, -1000, 9223, -1000, -1000, 53, 627,
	9006, 10787, -1000, -1000, 4409, 735, -102, 728, -1000, -113,
	-107, 6172, 168, -1000, -1000, -1000, -1000, 2843, 231, 160,
	-63, -69, -1000, -1000, -1000, -1000, 769, -1000, -1000, -1000,
	769, 118, 769, 769, 769, -39, -39, -39, -39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 785, 784, -1000, 769,
	769, 769, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 772, 137, 772, 770, 770, 780, -1000, 10787, -158,
	517, 3365, 897, 3365, -1000, 79, 10787, -1000, 10787, -1000,
	-1000, 10787, 3365, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 321, -1000,
	-1000, -1000, -1000, 858, 6665, 6665, 4148, 6665, -1000, -1000,
	-1000, 896, -1000, 914, 935, -1000, 879, 878, 5928, -1000,
	-1000, 228, 257, -1000, -1000, 390, -1000, -1000, -1000, -1000,
	179, 494, -1000, 1957, -1000, -1000, -1000, -1000, 402, 7153,
	7153, 7153, 377, 1957, 2033, 618, 1377, 169, 270, 270,
	237, 237, 237, 237, 237, 290, 290, -1000, -1000, -1000,
	531, -1000, -1000, -1000, 531, 5928, 731, -1000, -1000, 6665,
	-1000, 531, 613, 613, 467, 393, 738, -1000, 177, 715,
	613, 5928, 298, -1000, 6665, 531, -1000, 613, 531, 613,
	613, 719, 494, -1000, 727, -1000, 260, 824, 778, 810,
	764, -1000, -1000, -1000, -1000, 837, -1000, 817, -1000, -1000,
	-1000, -1000, -1000, 131, 130, 129, 10570, -1000, 950, 9006,
	716, -1000, -1000, 728, -102, -100, -1000, -1000, -1000, 333,
	-1000, 507, 706, 2582, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 774, 806, 99, 83, 164, 156, 497, 10570, -1000,
	-1000, -1000, 295, 55, 965, -1000, 97, -1000, 96, 441,
	-1000, -1000, -71, -1000, -1000, 350, -39, -39, 769, -39,
	-1000, -1000, 168, 884, 168, 168, 168, 425, 425, -161,
	-161, -1000, -1000, 343, 772, -1000, -1000, -1000, 342, -1000,
	10787, 10570, 3365, -1000, 3887, -1000, -1000, -1000, -1000, -1000,
	-1000, 293, 808, 198, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 44, 139, -1000, 3365, -1000,
	306, 10787, 10787, 853, 333, 333, 166, -1000, -1000, 10787,
	-1000, -1000, -1000, -1000, 682, -1000, -1000, -1000, 3104, 5928,
	-1000, 377, 1957, 1997, -1000, 7153, 7153, -1000, -1000, 613,
	5928, 333, -1000, -1000, -1000, 583, 440, 583, 7153, 7153,
	4148, 7153, 7153, -153, 677, 274, -1000, 6665, 369, -1000,
	-1000, -1000, -1000, -1000, 804, 11004, 494, -1000, 7876, 10570,
	940, 11004, 6665, 6665, -1000, -1000, 6665, 771, -1000, 6665,
	-1000, -1000, -1000, 494, 494, 494, 543, -1000, 940, 716,
	-1000, -1000, -1000, -123, -122, -1000, -1000, 2843, -1000, 2843,
	10570, 957, -1000, 493, 487, -1000, 471, -1000, -1000, 67,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -131, -1000,
	-1000, -1000, -1000, -1000, 614, 168, 168, -39, 168, -1000,
	287, -1000, -1000, -1000, 580, -1000, 576, -1000, -28, -30,
	-1000, 700, -1000, 561, 704, 803, -1000, 699, -1000, 249,
	-1000, 81, -1000, 10570, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 10570, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10787, -1000, -1000, -1000, -1000, -1000,
	10570, 86, -1000, -1000, 409, 6665, -1000, -1000, -1000, 3887,
	-1000, 950, 9006, -1000, -1000, 531, -1000, 7153, 1957, 1957,
	-1000, -1000, 531, 769, 769, -1000, 769, 770, -1000, -1000,
	769, 9, 769, 8, 531, 531, 1784, 1655, -1000, 1602,
	605, 494, -149, -1000, 333, 6665, -1000, 891, 610, 671,
	-1000, -1000, 5684, 531, 556, 162, 543, 926, -1000, 333,
	333, 333, 10570, 333, 10570, 10570, 10570, 7641, 10570, 926,
	-1000, -1000, -1000, -1000, 2582, -1000, 536, -1000, 769, 192,
	192, -1000, -1000, -1000, 94, -1000, -1000, -1000, -1000, 168,
	-1000, -1000, -1000, -39, 384, -39, -76, -77, 341, -1000,
	337, 10570, 10570, 10787, 3887, 2843, 10570, -1000, -1000, -1000,
	767, -1000, -1000, -1000, -1000, 886, 10570, -1000, -1000, 333,
	945, 694, -1000, 1957, -1000, -1000, 95, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 7153, 7153, -1000, 7153,
	7153, 7153, 531, 372, 333, 92, -1000, 494, -1000, -1000,
	726, 10570, 10570, -1000, -1000, 534, -1000, 530, 530, 530,
	191, -1000, -1000, 47, 10570, -1000, 802, -1000, -1000, 292,
	24, 729, 10570, -1000, 168, -1000, 168, -1000, -1000, 591,
	577, 527, 766, 760, -1000, -1000, 750, 10570, 494, 109,
	942, 936, -1000, -1000, 1536, 1536, 1536, 1536, 64, -1000,
	-1000, 962, -1000, 494, -1000, 734, 161, -1000, 10570, -1000,
	-1000, -1000, -1000, -1000, 47, -1000, 404, 241, 367, -166,
	-1000, 959, -1000, -1000, 960, 749, -1000, -1000, -1000, -1000,
	950, 10570, 10570, 10570, 522, 43, 85, -1000, 6665, 6665,
	-1000, -1000, -1000, -1000, 531, 58, -168, 11004, 671, 531,
	10570, -1000, -1000, -1000, 318, -1000, -1000, 10570, 192, 192,
	10570, -1000, 512, 501, 491, 736, 486, -1000, 10570, 748,
	333, 637, -1000, 852, -156, -173, 620, -1000, -1000, -1000,
	-1000, -1000, -1000, 481, -1000, 950, -1000, -1000, -158, -1000,
	43, 864, 10570, -1000, 795, -1000, 101, 10570, -1000, -1000,
	-1000, 40, 475, -163, 10787, -1000, 38, -1000, -171, 743,
	494, -174, 10570, 6909, -1000, 470, 1536, 531, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1147, 11, 521, 1146, 1145, 1144, 1143, 1142, 1137,
	1136, 1135, 1133, 1132, 1131, 1130, 1129, 1127, 1126, 1125,
	1124, 1123, 1122, 1119, 308, 1118, 1117, 1116, 77, 1115,
	82, 1114, 1112, 45, 80, 51, 41, 942, 1111, 25,
	65, 69, 1110, 49, 1107, 1106, 85, 1105, 66, 1104,
	1102, 54, 1101, 1098, 17, 6, 1097, 1095, 1092, 1089,
	79, 1, 1088, 1087, 1086, 1082, 1081, 1080, 50, 10,
	14, 18, 19, 1079, 31, 7, 1071, 52, 1070, 1069,
	1067, 1066, 34, 1061, 55, 1060, 40, 53, 1059, 48,
	75, 33, 22, 9, 83, 58, 1058, 37, 61, 47,
	1057, 1056, 428, 1055, 1054, 1053, 1052, 1051, 1049, 349,
	420, 1048, 1047, 1046, 39, 0, 201, 543, 67, 1045,
	42, 1044, 1226, 81, 57, 24, 1043, 27, 1467, 36,
	1042, 1039, 28, 1038, 1037, 1034, 1032, 1030, 1029, 1028,
	1027, 152, 30, 26, 1026, 1025, 1024, 43, 44, 23,
	46, 56, 1023, 1022, 29, 1020, 13, 16, 3, 60,
	1017, 1016, 1014, 1012, 32, 21, 1009, 15, 1007, 8,
	1005, 1003, 4, 1002, 20, 998, 2, 997, 5, 996,
	994, 988, 1282, 833, 982, 981, 978, 977, 86,
}
var yyR1 = [...]int{

	0, 180, 181, 181, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 6, 3, 4, 4, 5,
	5, 7, 7, 27, 27, 8, 9, 9, 9, 184,
	184, 46, 46, 90, 90, 10, 10, 10, 10, 95,
	95, 99, 99, 99, 100, 100, 100, 100, 130, 130,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 120,
	120, 178, 178, 177, 176, 176, 175, 175, 174, 16,
	161, 162, 162, 162, 162, 151, 133, 133, 133, 133,
	133, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 137, 137, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 136,
	136, 136, 136, 136, 136, 138, 138, 138, 138, 138,
	134, 134, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 140, 140, 140, 140, 140, 140, 140, 140, 150,
	150, 141, 141, 148, 148, 149, 149, 149, 147, 147,
	147, 144, 144, 145, 145, 146, 146, 142, 142, 142,
	143, 143, 153, 153, 170, 170, 169, 169, 169, 169,
	160, 160, 166, 166, 166, 166, 166, 166, 166, 159,
	159, 168, 168, 167, 154, 154, 154, 154, 154, 155,
	156, 156, 156, 156, 157, 157, 158, 158, 163, 163,
	163, 164, 164, 164, 165, 165, 165, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 179,
	179, 179, 179, 179, 179, 179, 179, 179, 179, 179,
	185, 185, 186, 186, 186, 186, 186, 186, 186, 173,
	171, 171, 172, 172, 13, 14, 14, 14, 14, 14,
	15, 15, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 107, 107, 104, 104,
	105, 105, 106, 106, 106, 108, 108, 108, 131, 131,
	131, 19, 19, 21, 21, 22, 23, 20, 20, 20,
	20, 20, 187, 24, 25, 25, 26, 26, 26, 30,
	30, 30, 28, 28, 29, 29, 35, 35, 34, 34,
	36, 36, 36, 36, 119, 119, 119, 118, 118, 38,
	38, 39, 39, 40, 40, 41, 41, 41, 53, 53,
	89, 89, 91, 91, 42, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 126, 126, 125, 125, 125, 124,
	124, 47, 47, 47, 49, 48, 48, 48, 48, 50,
	50, 52, 52, 51, 51, 54, 54, 54, 54, 55,
	55, 37, 37, 37, 37, 37, 37, 37, 103, 103,
	57, 57, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 67, 67, 67, 67, 67, 67, 58, 58,
	58, 58, 58, 58, 58, 33, 33, 68, 68, 68,
	74, 69, 69, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 65, 65, 65, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 64,
	188, 188, 66, 66, 66, 66, 31, 31, 31, 31,
	31, 129, 129, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 132, 132, 132, 132, 78, 78, 32,
	32, 76, 76, 77, 79, 79, 75, 75, 75, 60,
	60, 60, 60, 60, 60, 60, 60, 62, 62, 62,
	80, 80, 81, 81, 82, 82, 83, 83, 84, 85,
	85, 85, 86, 86, 86, 86, 87, 87, 87, 59,
	59, 59, 59, 59, 59, 88, 88, 88, 88, 92,
	92, 70, 70, 72, 72, 71, 73, 93, 93, 97,
	94, 94, 98, 98, 98, 96, 96, 96, 121, 121,
	121, 101, 101, 109, 109, 110, 110, 102, 102, 111,
	111, 111, 111, 111, 111, 111, 111, 111, 111, 112,
	112, 112, 113, 113, 116, 116, 117, 117, 122, 122,
	123, 123, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 182, 183, 127, 128,
	128, 128,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 6, 7, 5, 10, 1, 3, 1,
	3, 7, 8, 1, 1, 8, 8, 7, 6, 1,
	1, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 10, 11, 12, 4, 6, 5, 5, 5, 0,
	1, 0, 2, 1, 0, 2, 1, 3, 3, 4,
	4, 1, 3, 3, 3, 2, 3, 1, 1, 1,
	1, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	4, 2, 3, 2, 3, 2, 3, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	3, 2, 2, 2, 2, 1, 3, 3, 2, 1,
	1, 1, 4, 4, 4, 5, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 3, 0, 5, 0, 3, 5, 0, 3,
	3, 0, 1, 0, 1, 0, 1, 0, 3, 3,
	0, 2, 5, 4, 1, 2, 2, 3, 2, 3,
	0, 1, 2, 3, 3, 2, 3, 2, 2, 1,
	1, 1, 3, 2, 1, 4, 4, 7, 7, 13,
	1, 1, 2, 2, 0, 1, 1, 3, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 11, 13,
	7, 7, 7, 12, 7, 7, 7, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 7,
	1, 3, 8, 8, 5, 4, 6, 5, 4, 4,
	3, 2, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 3, 3, 3, 3, 4, 3, 6, 4, 2,
	4, 2, 2, 2, 2, 3, 1, 1, 0, 1,
	0, 1, 0, 2, 2, 0, 2, 2, 0, 1,
	1, 2, 1, 1, 2, 1, 1, 2, 2, 2,
	2, 2, 0, 2, 0, 2, 1, 2, 2, 0,
	1, 1, 0, 1, 0, 1, 0, 1, 1, 3,
	1, 2, 3, 5, 0, 1, 2, 1, 1, 0,
	2, 1, 3, 1, 1, 1, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 0, 5, 5, 5, 0,
	2, 1, 3, 3, 2, 3, 1, 2, 0, 3,
	1, 1, 3, 3, 4, 4, 5, 3, 4, 5,
	6, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 6, 4, 4, 6,
	6, 6, 6, 8, 8, 6, 8, 8, 9, 7,
	5, 4, 2, 2, 2, 2, 2, 2, 2, 2,
	0, 2, 4, 4, 4, 4, 0, 3, 4, 7,
	3, 1, 1, 2, 3, 3, 1, 2, 2, 1,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 2,
	1, 3, 5, 4, 6, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 1, 2, 1, 1, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -180, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -17, -18, -19, -21, -22, -23,
	-20, -3, -4, 6, 7, -27, 9, 10, 29, -16,
	111, 112, 114, 113, 141, 115, 134, 48, 157, 158,
	160, 161, 25, 135, 136, 139, 140, -182, 8, 249,
	52, -181, 266, -82, 15, -26, 5, -24, -187, -24,
	-24, -24, -24, -24, -161, 52, -120, 120, 69, 149,
	241, 117, 118, 132, -102, 120, 122, 118, 118, 119,
	120, 241, 117, 118, -51, -122, 55, -115, 156, 257,
	157, 170, 171, 162, 195, 186, 258, 154, 183, 187,
	228, 64, 160, 237, 126, 137, 181, 177, 174, 27,
	201, 264, 176, 129, 202, 206, 229, 167, 168, 231,
	199, 31, 131, 259, 33, 145, 232, 204, 198, 194,
	197, 166, 193, 37, 208, 207, 209, 227, 189, 155,
	178, 18, 140, 143, 203, 205, 175, 124, 147, 263,
	233, 173, 144, 139, 236, 153, 161, 230, 169, 239,
	36, 214, 164, 165, 128, 158, 151, 191, 146, 179,
	180, 196, 163, 192, 159, 148, 141, 238, 215, 265,
	190, 188, 184, 185, 152, 120, 149, 150, 220, 221,
	222, 223, 260, 261, 234, 182, 216, 217, 118, 105,
	187, 111, 218, 119, 31, 147, -131, 118, -104, 150,
	220, 221, 222, 223, 55, 230, 229, 224, -122, 159,
	-127, -127, -127, -127, -127, -2, -86, 17, 16, -5,
	-3, -182, 6, 20, 21, -30, 38, 39, -25, -36,
	96, -37, -122, -56, 71, -61, 28, 55, -115, 23,
	-60, -57, -75, -73, -74, 105, 106, 94, 95, 102,
	72, 107, -65, -63, -64, -66, 57, 56, 65, 58,
	59, 60, 61, 66, 67, 68, -116, -71, -182, 42,
	43, 250, 251, 252, 253, 256, 254, 74, 32, 240,
	248, 247, 246, 244, 245, 242, 243, 123, 241, 100,
	249, -102, -39, -40, -41, -42, -53, -74, -182, -51,
	11, -46, -51, -94, -130, 159, -98, 230, 229, -117,
	-96, -116, -114, 228, 187, 227, 55, -115, 116, 70,
	22, 24, 212, 73, 105, 16, 74, 104, 250, 111,
	46, 242, 243, 240, 252, 253, 241, 218, 28, 10,
	25, 135, 21, 98, 113, 77, 78, 138, 23, 136,
	68, 19, 49, 130, 11, 13, 14, 123, 122, 89,
	119, 44, 8, 107, 26, 86, 40, 133, 42, 87,
	17, 244, 245, 30, 256, 142, 100, 47, 34, 71,
	66, 50, 235, 69, 15, 45, 88, 114, 249, 43,
	117, 6, 255, 29, 134, 41, 118, 219, 76, 121,
	67, 5, 132, 9, 48, 51, 246, 247, 248, 32,
	75, 12, -162, -151, 55, 119, -51, 249, -116, -110,
	123, -110, -110, 118, -51, -51, -109, 123, 55, -109,
	-109, -109, -51, 108, -51, 55, 29, 241, 55, 147,
	118, 148, 120, -128, -182, -117, -128, -128, -128, 151,
	152, -128, -105, 225, 50, -128, -183, 54, -87, 19,
	30, -37, -122, -83, -84, -37, -82, -2, -24, 34,
	-28, 21, 63, 11, -119, 70, 69, 86, -118, 22,
	-116, 57, 108, -37, -58, 89, 71, 87, 88, 73,
	91, 90, 101, 94, 95, 96, 97, 98, 99, 100,
	92, 93, 104, 79, 80, 81, 82, 83, 84, 85,
	-103, -182, -74, -182, 109, 110, -61, -61, -61, -61,
	-61, -61, -61, -182, -2, -69, -37, -182, -182, -182,
	-182, -182, -182, -182, -182, -182, -78, -37, -182, -188,
	-182, -188, -188, -188, -188, -188, -188, -188, -182, -182,
	-182, -182, -52, 26, -51, 29, 53, -47, -49, -48,
	-50, 40, 44, 46, 41, 42, 43, 47, -126, 22,
	-39, -182, -125, 143, -124, 22, -122, 57, -51, -46,
	-184, 53, 11, 51, 53, -94, 159, -95, -99, 231,
	233, 79, -121, -116, 57, 28, 29, 54, 53, -152,
	-133, -137, -134, -139, -138, -140, -135, -136, 186, 258,
	183, 187, 184, 105, 188, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 190, 201, 29, 137, 179,
	180, 181, 182, 202, 203, 204, 205, 206, 207, 208,
	209, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 173, 174, 176, 177, 178, -116, -128, 120, -178,
	51, 55, 71, 55, -51, -51, 235, -128, 121, -51,
	23, 50, -51, 55, 55, -123, -122, -114, -128, -128,
	-128, -128, -128, -128, -128, -128, -128, -128, -107, 219,
	226, -51, 9, 89, 53, 18, 108, 53, -85, 24,
	25, -86, -183, -30, -62, -116, 58, 61, -29, 41,
	-51, -37, -37, -67, 66, 71, 67, 68, -118, 96,
	-123, -117, -114, -61, -68, -71, -74, 62, 89, 87,
	88, 73, -61, -61, -61, -61, -61, -61, -61, -61,
	-61, -61, -61, -61, -61, -61, -61, -129, 55, 57,
	55, -60, -60, -116, -35, 21, -34, -36, -183, 53,
	-183, -2, -34, -34, -37, -37, -75, -116, -122, -75,
	-34, -28, -76, -77, 75, -75, -183, -34, -35, -34,
	-34, -90, 143, -51, -93, -97, -75, -40, -41, -41,
	-40, -41, 40, 40, 40, 45, 40, 45, 40, -48,
	-122, -183, -54, 48, 122, 49, -182, -124, -90, 51,
	-39, -51, -98, -95, 53, 232, 234, 235, 50, -37,
	-143, 104, -163, -164, -165, -117, 57, 58, -151, -153,
	-154, -166, -155, 124, 128, 129, 132, -159, 126, 119,
	133, 66, 71, 28, 50, 212, 124, 133, 132, 64,
	-146, 210, -144, 215, -141, 52, -141, -141, 185, -141,
	-141, -141, -142, 187, -142, -142, -142, 52, 52, -141,
	-141, -141, -148, 52, 175, -148, -148, -149, 52, -149,
	50, 51, -51, -176, 260, -177, 55, -128, 23, -128,
	-111, 116, 113, 114, -173, 112, 212, 187, 64, 28,
	15, 250, 143, 265, 55, 144, -51, -51, -51, -128,
	-106, 11, 89, 36, -37, -37, -123, -84, -87, -101,
	19, 11, 32, 32, -34, 66, 67, 68, 108, -182,
	-68, -61, -61, -61, -33, 138, 70, -183, -183, -34,
	53, -37, -183, -183, -183, 53, 51, 22, 53, 11,
	108, 53, 11, -183, -34, -79, -77, 77, -37, -183,
	-183, -183, -183, -183, -59, 29, 32, -2, -182, -182,
	-55, 53, 12, 79, -44, -43, 50, 51, -45, 50,
	-43, 40, 40, 119, 119, 119, -91, -116, -55, -39,
	-55, -99, -100, 236, 233, 239, 55, 53, -165, 79,
	52, 50, 133, -159, -159, 55, -159, 55, 55, -157,
	-116, 66, 57, 58, 59, 66, 240, 65, 9, 133,
	133, 57, -145, 216, 58, -142, -142, -141, -142, -143,
	29, -143, -143, -143, -150, 57, -150, -147, 260, 261,
	-147, 58, -148, 58, -51, -116, -128, -175, -174, -117,
	-127, -120, -186, 149, 125, 130, 129, 55, 124, 128,
	143, -179, 149, 125, 126, 130, 129, 55, 119, 133,
	124, 128, 143, 132, -112, -113, 121, 22, 119, 133,
	143, 116, -128, -108, 87, 12, -122, -122, 37, 108,
	-51, -38, 11, 96, -117, -35, -33, 70, -61, -61,
	-183, -36, -132, 105, 183, 137, 181, 177, 199, 200,
	189, 214, 179, 215, -129, -132, -61, -61, -117, -61,
	-61, 257, -82, 78, -37, 76, -92, 50, -93, -70,
	-72, -71, -182, -2, -88, -116, -91, -82, -97, -37,
	-37, -37, 52, -37, -182, -182, -182, -183, 53, -82,
	-55, 233, 237, 238, -164, -165, -168, -167, -116, 10,
	9, 55, 55, 55, 130, 240, 54, -143, -143, -142,
	-143, 55, 105, 54, 53, 54, 179, 179, 53, 54,
	53, 52, 51, 50, 53, 79, -185, 119, 133, -127,
	-116, -127, -116, -51, -127, -116, 126, -154, 57, -37,
	-55, -39, -183, -61, -183, -141, -141, -141, -149, -141,
	168, -141, 168, -183, -183, -183, 53, 19, -183, 53,
	19, -182, -32, 255, -37, 27, -92, 53, -183, -183,
	-183, 53, 108, -183, -86, -89, -116, -89, -89, -89,
	-125, -116, -86, 54, 53, -141, -156, 153, 154, 29,
	155, -156, 133, -143, -142, 57, -142, 217, 217, 58,
	58, -89, -116, -51, -174, -165, -116, 52, 26, -116,
	-80, 13, -142, 55, -61, -61, -61, -61, -61, -183,
	57, 133, -72, 32, -2, -182, -116, -116, 53, 54,
	-183, -183, -183, -54, -170, -169, 51, 131, 64, 260,
	-167, 50, 66, 156, 50, -157, -143, -143, 54, 54,
	54, 52, 52, 52, -89, -182, 124, -81, 14, 16,
	-183, -183, -183, -183, -31, 89, 260, 9, -70, -2,
	108, -116, -169, 55, -160, 79, 57, 262, 9, 10,
	52, -55, -89, -89, -89, 54, -171, -172, 143, 133,
	-37, -69, -183, 258, 47, 263, -93, -183, -116, 58,
	-116, -156, -156, -158, -116, 54, 54, 54, -178, -183,
	53, -116, 52, 37, 259, 264, 54, 53, -55, -176,
	-172, 32, -89, 37, 127, -116, 145, 54, 260, -51,
	146, 263, 52, -182, 264, -158, -61, 142, 54, -183,
	-183,
}
var yyDef = [...]int{

	0, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 554, 0, 322, 322, 322, 322, 322, 322, 0,
	69, 607, 0, 0, 0, 0, -2, 312, 313, 0,
	315, 316, 838, 838, 838, 838, 838, 0, 33, 34,
	836, 1, 3, 562, 0, 0, 326, 329, 324, 0,
	607, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	605, 605, 605, 70, 0, 0, 608, 0, 603, 0,
	603, 603, 603, 0, 271, 393, 628, 629, 726, 727,
	728, 729, 730, 731, 732, 733, 734, 735, 736, 737,
	738, 739, 740, 741, 742, 743, 744, 745, 746, 747,
	748, 749, 750, 751, 752, 753, 754, 755, 756, 757,
	758, 759, 760, 761, 762, 763, 764, 765, 766, 767,
	768, 769, 770, 771, 772, 773, 774, 775, 776, 777,
	778, 779, 780, 781, 782, 783, 784, 785, 786, 787,
	788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 0, 0,
	0, 0, 839, 839, 839, 839, 0, 839, 300, 289,
	291, 292, 293, 294, 839, 309, 310, 299, 311, 314,
	317, 318, 319, 320, 321, 27, 566, 0, 0, 554,
	29, 0, 322, 327, 328, 332, 330, 331, 323, 0,
	340, 344, 0, 401, 0, 406, 408, -2, -2, 0,
	443, 444, 445, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 470, 471, 472, 473, 539, 540, 541, 542,
	543, 544, 545, 546, 410, 411, 536, 586, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 527, 0, 500,
	500, 500, 500, 500, 500, 500, 500, 0, 0, 0,
	0, 0, 0, 351, 353, 354, 355, 374, 0, 376,
	0, 0, 41, 45, 0, 812, 590, -2, -2, 0,
	0, 626, 627, -2, 737, -2, 624, 625, 632, 633,
	634, 635, 636, 637, 638, 639, 640, 641, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 653,
	654, 655, 656, 657, 658, 659, 660, 661, 662, 663,
	664, 665, 666, 667, 668, 669, 670, 671, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 0, 81, 0, 0, 839, 0, 71, 0,
	0, 0, 0, 0, 839, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 272, 839, 839, 839, 839, 839,
	839, 839, 839, 281, 840, 841, 282, 283, 284, 839,
	839, 286, 0, 301, 0, 295, 28, 837, 22, 0,
	0, 563, 0, 555, 556, 559, 562, 27, 329, 0,
	334, 333, 325, 0, 341, 0, 0, 0, 345, 0,
	347, 348, 0, 404, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 428, 429, 430, 431, 432, 433, 434,
	407, 0, 421, 0, 0, 0, 463, 464, 465, 466,
	467, 468, 0, 336, 27, 0, 441, 0, 0, 0,
	0, 0, 0, 0, 0, 332, 0, 528, 0, 492,
	0, 493, 494, 495, 496, 497, 498, 499, 0, 336,
	0, 0, 43, 0, 392, 0, 0, 0, 0, 0,
	0, 381, 0, 0, 384, 0, 0, 0, 0, 375,
	0, 0, 395, 781, 377, 0, 379, 380, -2, 0,
	0, 0, 39, 40, 0, 46, 812, 48, 49, 0,
	0, 0, 180, 598, 599, 600, 596, 218, 0, 85,
	175, 171, 87, 88, 89, 90, 161, 108, 130, 131,
	161, 161, 161, 161, 161, 177, 177, 177, 177, 142,
	143, 144, 145, 146, 147, 148, 0, 0, 125, 161,
	161, 161, 129, 151, 152, 153, 154, 155, 156, 157,
	158, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 163, 163, 163, 165, 165, 0, 64, 0, 74,
	0, 839, 0, 839, 79, 0, 0, 237, 0, 265,
	604, 0, 839, 268, 269, 394, 630, 631, 273, 274,
	275, 276, 277, 278, 279, 280, 285, 288, 302, 296,
	297, 290, 567, 0, 0, 0, 0, 0, 558, 560,
	561, 566, 30, 332, 0, 547, 0, 0, 0, 335,
	25, 402, 403, 405, 422, 0, 424, 426, 346, 342,
	0, 537, -2, 412, 413, 437, 438, 439, 0, 0,
	0, 0, 435, 417, 0, 448, 449, 450, 451, 452,
	453, 454, 455, 456, 457, 458, 459, 462, 511, 512,
	0, 460, 461, 469, 0, 0, 337, 338, 440, 0,
	585, 27, 0, 0, 0, 0, 0, 536, 0, 0,
	0, 0, 534, 531, 0, 0, 501, 0, 0, 0,
	0, 0, 0, 391, 399, 587, 0, 352, 370, 372,
	0, 367, 382, 383, 385, 0, 387, 0, 389, 390,
	356, 357, 358, 0, 0, 0, 0, 378, 399, 0,
	399, 42, 591, 47, 0, 0, 52, 53, 592, 593,
	594, 0, 80, 219, 221, 224, 225, 226, 82, 83,
	84, 0, 204, 0, 0, 0, 0, 0, 214, 199,
	200, 92, 0, 0, 0, 101, 0, 103, 105, 0,
	91, 176, 173, 172, 107, 0, 177, 177, 161, 177,
	136, 137, 180, 0, 180, 180, 180, 0, 0, 168,
	168, 128, 119, 0, 163, 121, 122, 123, 0, 124,
	0, 0, 839, 66, 0, 72, 73, 67, 606, 68,
	838, 69, 0, 619, 238, 609, 610, 611, 612, 613,
	614, 615, 616, 617, 618, 0, 0, 264, 839, 267,
	305, 0, 0, 0, 564, 565, 0, 557, 23, 0,
	601, 602, 548, 549, 349, 423, 425, 427, 0, 336,
	414, 435, 418, 0, 415, 0, 0, 409, 474, 0,
	0, 442, -2, 477, 478, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 554, 0, 532, 0, 0, 491,
	502, 503, 504, 505, 579, 0, 0, -2, 0, 0,
	554, 0, 0, 0, 364, 371, 0, 0, 365, 0,
	366, 386, 388, 0, 0, 0, 0, 362, 554, 399,
	38, 50, 51, 0, 0, 57, 181, 0, 222, 0,
	0, 0, 192, 0, 0, 195, 0, 197, 198, 0,
	215, 93, 94, 95, 96, 97, 98, 99, 0, 102,
	104, 106, 86, 174, 0, 180, 180, 177, 180, 138,
	0, 139, 140, 141, 0, 159, 0, 126, 0, 0,
	127, 0, 120, 0, 0, 0, 65, 75, 76, 0,
	227, 0, 838, 0, 252, 253, 254, 255, 256, 257,
	258, 838, 0, 239, 240, 241, 242, 243, 244, 245,
	246, 247, 248, 249, 0, 838, 620, 621, 622, 623,
	0, 0, 266, 287, 0, 0, 303, 304, 568, 0,
	24, 399, 0, 343, 538, 0, 416, 0, 436, 419,
	475, 339, 0, 161, 161, 516, 161, 165, 519, 520,
	161, 522, 161, 525, 0, 0, 0, 0, 537, 0,
	0, 0, 529, 490, 535, 0, 31, 0, 579, 569,
	581, 583, 0, 27, 0, 575, 0, 562, 588, 400,
	589, 368, 0, 373, 0, 0, 0, 376, 0, 562,
	37, 54, 55, 56, 220, 223, 0, 201, 161, 0,
	0, 193, 194, 196, 0, 100, 162, 132, 133, 180,
	134, 178, 179, 177, 0, 177, 0, 0, 0, 166,
	0, 0, 0, 0, 0, 0, 0, 250, 251, 231,
	0, 232, 234, 235, 236, 0, 214, 230, 306, 307,
	550, 350, 476, 420, 479, 513, 177, 517, 518, 521,
	523, 524, 526, 481, 480, 482, 0, 0, 485, 0,
	0, 0, 0, 0, 533, 0, 32, 0, 584, -2,
	0, 0, 0, 44, 35, 0, 360, 0, 0, 0,
	395, 363, 36, 183, 0, 203, 205, 210, 211, 0,
	0, 206, 214, 135, 180, 160, 180, 169, 170, 0,
	0, 0, 0, 0, 77, 78, 0, 0, 0, 215,
	552, 0, 514, 515, 0, 0, 0, 0, 506, 489,
	530, 0, 582, 0, -2, 0, 577, 576, 0, 369,
	396, 397, 398, 359, 182, 184, 0, 190, 0, 0,
	202, 0, 212, 213, 0, 0, 149, 150, 164, 167,
	399, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	483, 484, 486, 487, 0, 0, 0, 0, 572, 27,
	0, 361, 185, 186, 0, 191, 188, 0, 0, 0,
	0, 61, 0, 0, 0, 71, 0, 260, 0, 0,
	553, 551, 488, 0, 0, 0, 580, -2, 578, 187,
	189, 207, 208, 0, 216, 399, 62, 228, 74, 259,
	0, 0, 0, 507, 0, 510, 0, 0, 63, 233,
	261, 0, 0, 508, 0, 217, 0, 229, 0, 0,
	0, 0, 0, 0, 509, 0, 0, 0, 209, 262,
	263,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 99, 91, 3,
	52, 54, 96, 94, 53, 95, 108, 97, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 266,
	80, 79, 81, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 101, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 90, 3, 102,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 73, 74, 75,
	76, 77, 78, 82, 83, 84, 85, 86, 87, 88,
	89, 92, 93, 98, 100, 103, 104, 105, 106, 107,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:311
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:316
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:317
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:321
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:344
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:352
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 24:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:356
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:362
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 26:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:369
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:375
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:379
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:385
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:389
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:396
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:408
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:420
		{
			yyVAL.str = InsertStr
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:424
		{
			yyVAL.str = ReplaceStr
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:430
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), TableExprs: yyDollar[3].tableExprs, Exprs: yyDollar[5].updateExprs, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:436
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:440
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:444
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:449
		{
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:450
		{
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:454
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:458
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:463
		{
			yyVAL.partitions = nil
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:467
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:473
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:477
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:481
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 48:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:485
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:491
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:495
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:501
		{
			yyVAL.setExpr = yyDollar[3].setExpr
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:505
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("0"))}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:509
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_read_only"), Expr: NewIntVal([]byte("1"))}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:515
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("repeatable read"))}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:519
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read committed"))}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:523
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("read uncommitted"))}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:527
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent("tx_isolation"), Expr: NewStrVal([]byte("serializable"))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:533
		{
			yyVAL.str = SessionStr
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:537
		{
			yyVAL.str = GlobalStr
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:543
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 61:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.y:548
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   NewColIdent(""),
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[10].expr),
				},
				IndexCols: yyDollar[8].columns,
			}
		}
	case 62:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:564
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[8].tableName,
				NewName: yyDollar[8].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[6].colIdent,
					Unique: bool(yyDollar[2].boolVal),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 63:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:579
		{
			yyVAL.statement = &DDL{
				Action:  CreateIndexStr,
				Table:   yyDollar[6].tableName,
				NewName: yyDollar[6].tableName,
				IndexSpec: &IndexSpec{
					Name:   yyDollar[4].colIdent,
					Type:   yyDollar[8].colIdent,
					Unique: bool(yyDollar[2].boolVal),
					Where:  NewWhere(WhereStr, yyDollar[12].expr),
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:594
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:598
		{
			yyVAL.statement = &DDL{Action: CreateStr, NewName: yyDollar[5].tableName.ToViewName()}
		}
	case 66:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:602
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[3].colIdent,
				Type:   yyDollar[4].colIdent,
				Params: yyDollar[5].vindexParams,
			}}
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:610
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:614
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:619
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:623
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:628
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:632
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:638
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:643
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:648
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:654
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:659
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:665
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:671
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:678
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:685
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:690
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:694
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:698
		{
			yyVAL.TableSpec.AddForeignKey(yyDollar[3].foreignKeyDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:704
		{
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:709
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:720
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyDollar[1].columnType.Default = nil
			yyDollar[1].columnType.OnUpdate = nil
			yyDollar[1].columnType.Autoincrement = BoolVal(false)
			yyDollar[1].columnType.KeyOpt = colKeyNone
			yyDollar[1].columnType.Comment = nil
			yyDollar[1].columnType.Array = yyDollar[2].boolVal
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:731
		{
			yyDollar[1].columnType.NotNull = BoolVal(false)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:736
		{
			yyDollar[1].columnType.NotNull = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:741
		{
			yyDollar[1].columnType.Default = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:746
		{
			yyDollar[1].columnType.Default = NewIntVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:751
		{
			yyDollar[1].columnType.Default = NewFloatVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:756
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:761
		{
			yyDollar[1].columnType.Default = NewValArg(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:766
		{
			yyDollar[1].columnType.Default = NewBitVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:771
		{
			yyDollar[1].columnType.OnUpdate = NewValArg(yyDollar[4].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:776
		{
			yyDollar[1].columnType.Autoincrement = BoolVal(true)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:781
		{
			yyDollar[1].columnType.KeyOpt = colKeyPrimary
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:786
		{
			yyDollar[1].columnType.KeyOpt = colKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:791
		{
			yyDollar[1].columnType.KeyOpt = colKeyUniqueKey
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:796
		{
			yyDollar[1].columnType.KeyOpt = colKeyUnique
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:801
		{
			yyDollar[1].columnType.Comment = NewStrVal(yyDollar[3].bytes)
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:808
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].optVal
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:813
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:819
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:823
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:827
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:831
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:835
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:839
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:843
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:847
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:851
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:855
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:861
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:867
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes)}
			yyVAL.columnType.Length = yyDollar[3].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[3].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:873
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:879
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:885
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Timezone: yyDollar[3].boolVal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:911
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:915
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:931
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:935
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:939
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:943
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Length: yyDollar[3].optVal, Charset: yyDollar[4].str, Collate: yyDollar[5].str}
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:947
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:951
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:955
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:959
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:963
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:967
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:971
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:975
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:979
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1010
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1014
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1018
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1022
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1026
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1030
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1034
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1038
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1044
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1049
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1054
		{
			yyVAL.optVal = nil
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1058
		{
			yyVAL.optVal = NewIntVal(yyDollar[2].bytes)
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1063
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1067
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1075
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1079
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1085
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1093
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1097
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1101
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1106
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1110
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1115
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1119
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1124
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1128
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1133
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1137
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1141
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1146
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1150
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1156
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1160
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1166
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1170
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1176
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1180
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1185
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1189
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[2].bytes), Value: NewStrVal([]byte(yyDollar[3].colIdent.String()))}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1195
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1205
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1209
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1213
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Fulltext: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1217
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Fulltext: true}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1221
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(string(yyDollar[3].bytes)), Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1225
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: true}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1229
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(string(yyDollar[2].bytes)), Unique: false}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1235
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1239
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1245
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1249
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1255
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].optVal}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1262
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = NewColIdent("")
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1268
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = NewColIdent("")
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 207:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1274
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[7].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[4].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1280
		{
			yyDollar[1].foreignKeyDefinition.OnUpdate = yyDollar[4].colIdent
			yyDollar[1].foreignKeyDefinition.OnDelete = yyDollar[7].colIdent
			yyVAL.foreignKeyDefinition = yyDollar[1].foreignKeyDefinition
		}
	case 209:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1288
		{
			yyVAL.foreignKeyDefinition = &ForeignKeyDefinition{
				ConstraintName:   yyDollar[2].colIdent,
				IndexName:        yyDollar[5].colIdent,
				IndexColumns:     yyDollar[7].colIdents,
				ReferenceName:    NewColIdent(yyDollar[10].tableName.Name.String()),
				ReferenceColumns: yyDollar[12].colIdents,
			}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1300
		{
			yyVAL.colIdent = NewColIdent("RESTRICT")
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1304
		{
			yyVAL.colIdent = NewColIdent("CASCADE")
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1308
		{
			yyVAL.colIdent = NewColIdent("SET NULL")
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1312
		{
			yyVAL.colIdent = NewColIdent("NO ACTION")
		}
	case 214:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1317
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1324
		{
			yyVAL.colIdents = []ColIdent{yyDollar[1].colIdent}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1328
		{
			yyVAL.colIdents = append(yyDollar[1].colIdents, yyDollar[3].colIdent)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1333
		{
			yyVAL.str = ""
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1337
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1341
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1349
		{
			yyVAL.str = yyDollar[1].str
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1353
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1357
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1363
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1367
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1371
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1377
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.y:1381
		{
			yyVAL.statement = &DDL{
				Action:  AddIndexStr,
				Table:   yyDollar[4].tableName,
				NewName: yyDollar[4].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  bool(yyDollar[6].boolVal),
					Primary: false,
				},
				IndexCols: yyDollar[10].columns,
			}
		}
	case 229:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.y:1395
		{
			yyVAL.statement = &DDL{
				Action:  AddPrimaryKeyStr,
				Table:   yyDollar[5].tableName,
				NewName: yyDollar[5].tableName,
				IndexSpec: &IndexSpec{
					Name:    yyDollar[8].colIdent,
					Unique:  false,
					Primary: true,
				},
				IndexCols: yyDollar[12].columns,
			}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1409
		{
			yyVAL.statement = &DDL{
				Action:     AddForeignKeyStr,
				Table:      yyDollar[5].tableName,
				NewName:    yyDollar[5].tableName,
				ForeignKey: yyDollar[7].foreignKeyDefinition,
			}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1418
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1422
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.y:1426
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1439
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1449
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[4].tableName, NewName: yyDollar[7].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1454
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, NewName: yyDollar[4].tableName}
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1459
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName(), NewName: yyDollar[3].tableName.ToViewName()}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1463
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1495
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1501
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1505
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 262:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1511
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 263:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:1515
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1521
		{
			yyVAL.statement = &DDL{Action: RenameStr, Table: yyDollar[3].tableName, NewName: yyDollar[5].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1527
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName, IfExists: exists}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1535
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName, NewName: yyDollar[5].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1540
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, Table: yyDollar[4].tableName.ToViewName(), IfExists: exists}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1548
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1552
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1558
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1562
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1567
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName, NewName: yyDollar[3].tableName}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1573
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1577
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1581
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1586
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1590
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1594
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1598
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1602
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1606
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1610
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1618
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1622
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1626
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:1630
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[4].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[4].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Extended: yyDollar[2].str, Full: yyDollar[3].str, DbName: yyDollar[5].str, Filter: yyDollar[6].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[4].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1640
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1644
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:1648
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), OnTable: yyDollar[4].tableName}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1652
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1656
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1660
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1664
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1680
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1684
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1690
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1694
		{
			yyVAL.str = "extended "
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1700
		{
			yyVAL.str = ""
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1704
		{
			yyVAL.str = "full "
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1710
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1714
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1718
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1724
		{
			yyVAL.showFilter = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1728
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1732
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1738
		{
			yyVAL.str = ""
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1742
		{
			yyVAL.str = SessionStr
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1746
		{
			yyVAL.str = GlobalStr
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1752
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1756
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1762
		{
			yyVAL.statement = &Begin{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1766
		{
			yyVAL.statement = &Begin{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1772
		{
			yyVAL.statement = &Commit{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1778
		{
			yyVAL.statement = &Rollback{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1784
		{
			yyVAL.statement = &OtherRead{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1788
		{
			yyVAL.statement = &OtherRead{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1792
		{
			yyVAL.statement = &OtherRead{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1796
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1800
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1805
		{
			setAllowComments(yylex, true)
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1809
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1815
		{
			yyVAL.bytes2 = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1819
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1825
		{
			yyVAL.str = UnionStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1829
		{
			yyVAL.str = UnionAllStr
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1833
		{
			yyVAL.str = UnionDistinctStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1838
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1842
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1846
		{
			yyVAL.str = SQLCacheStr
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1851
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1855
		{
			yyVAL.str = DistinctStr
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1860
		{
			yyVAL.str = ""
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1864
		{
			yyVAL.str = StraightJoinHint
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1869
		{
			yyVAL.selectExprs = nil
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1873
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1879
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1883
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1889
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1893
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1897
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:1901
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1906
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1910
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1914
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1921
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 349:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:1926
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:1930
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1936
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1940
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1950
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1954
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1958
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1964
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:1968
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1974
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1978
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:1984
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:1988
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2001
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2005
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2009
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2013
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2019
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 369:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2021
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2025
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2027
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2031
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2033
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2036
		{
			yyVAL.empty = struct{}{}
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2038
		{
			yyVAL.empty = struct{}{}
		}
	case 376:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2041
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2045
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2049
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2056
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2062
		{
			yyVAL.str = JoinStr
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2066
		{
			yyVAL.str = JoinStr
		}
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2070
		{
			yyVAL.str = JoinStr
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2076
		{
			yyVAL.str = StraightJoinStr
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2082
		{
			yyVAL.str = LeftJoinStr
		}
	case 386:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2086
		{
			yyVAL.str = LeftJoinStr
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2090
		{
			yyVAL.str = RightJoinStr
		}
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2094
		{
			yyVAL.str = RightJoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2100
		{
			yyVAL.str = NaturalJoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2104
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2114
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2118
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2124
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2128
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 395:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2133
		{
			yyVAL.indexHints = nil
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2137
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 397:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2141
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2145
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2150
		{
			yyVAL.expr = nil
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2154
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2164
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 403:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2168
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2172
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2176
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2184
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2190
		{
			yyVAL.str = ""
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2194
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2200
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2204
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2210
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2214
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 414:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2218
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 415:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2222
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 416:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2226
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2230
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2234
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2238
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 420:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2242
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 421:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2246
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2252
		{
			yyVAL.str = IsNullStr
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2256
		{
			yyVAL.str = IsNotNullStr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2260
		{
			yyVAL.str = IsTrueStr
		}
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2264
		{
			yyVAL.str = IsNotTrueStr
		}
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2268
		{
			yyVAL.str = IsFalseStr
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2272
		{
			yyVAL.str = IsNotFalseStr
		}
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2278
		{
			yyVAL.str = EqualStr
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2282
		{
			yyVAL.str = LessThanStr
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2286
		{
			yyVAL.str = GreaterThanStr
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2290
		{
			yyVAL.str = LessEqualStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2294
		{
			yyVAL.str = GreaterEqualStr
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2298
		{
			yyVAL.str = NotEqualStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2302
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 435:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2307
		{
			yyVAL.expr = nil
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2311
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2317
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2321
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2325
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2331
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2337
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2341
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2347
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2351
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2355
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2359
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2363
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2367
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2371
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2375
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2379
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 452:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2383
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2387
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2391
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2395
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2399
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2403
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2407
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2411
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2415
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2419
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2423
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2427
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2431
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2435
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2443
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2457
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2461
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2465
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 474:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2483
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2487
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 476:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2491
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2501
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2505
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 479:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2509
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 480:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2513
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 481:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2517
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 482:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2521
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 483:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2525
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 484:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2529
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2533
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: nil}
		}
	case 486:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2537
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 487:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.y:2541
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 488:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.y:2545
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 489:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2549
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 490:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2553
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2557
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2567
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2571
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 494:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 496:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2584
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2589
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2594
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2599
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2613
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2617
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 504:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2625
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 506:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2631
		{
			yyVAL.str = ""
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2635
		{
			yyVAL.str = BooleanModeStr
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2639
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 509:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.y:2643
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2647
		{
			yyVAL.str = QueryExpansionStr
		}
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2653
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2657
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2663
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2667
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2671
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal, Charset: string(yyDollar[3].bytes)}
		}
	case 516:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2675
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2679
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2683
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2689
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2693
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2697
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2701
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2705
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2709
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].optVal}
		}
	case 525:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2713
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2717
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2722
		{
			yyVAL.expr = nil
		}
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2726
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2731
		{
			yyVAL.str = string("")
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2735
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2741
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2745
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2751
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2756
		{
			yyVAL.expr = nil
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2760
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 536:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2766
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2770
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 538:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2774
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2780
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2784
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2788
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2792
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2796
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2800
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2804
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2808
		{
			yyVAL.expr = &NullVal{}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2814
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2823
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2827
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 550:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2832
		{
			yyVAL.exprs = nil
		}
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2836
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2841
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2845
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2850
		{
			yyVAL.orderBy = nil
		}
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2854
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2860
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 557:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2864
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2870
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2875
		{
			yyVAL.str = AscScr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2879
		{
			yyVAL.str = AscScr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2883
		{
			yyVAL.str = DescScr
		}
	case 562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2888
		{
			yyVAL.limit = nil
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2892
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2896
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2900
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2905
		{
			yyVAL.str = ""
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2909
		{
			yyVAL.str = ForUpdateStr
		}
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2913
		{
			yyVAL.str = ShareModeStr
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2926
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2930
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2934
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2939
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:2943
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 574:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:2947
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2954
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2958
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2962
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2966
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:2971
		{
			yyVAL.updateExprs = nil
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:2975
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2981
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:2985
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:2991
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:2995
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3001
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3007
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3017
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3021
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3027
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3033
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3037
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3043
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3047
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3051
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3058
		{
			yyVAL.bytes = []byte("charset")
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3065
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3069
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3073
		{
			yyVAL.expr = &Default{}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3082
		{
			yyVAL.byt = 0
		}
	case 604:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:3084
		{
			yyVAL.byt = 1
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3087
		{
			yyVAL.empty = struct{}{}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:3089
		{
			yyVAL.empty = struct{}{}
		}
	case 607:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3092
		{
			yyVAL.str = ""
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3094
		{
			yyVAL.str = IgnoreStr
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3098
		{
			yyVAL.empty = struct{}{}
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3100
		{
			yyVAL.empty = struct{}{}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3102
		{
			yyVAL.empty = struct{}{}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3104
		{
			yyVAL.empty = struct{}{}
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3106
		{
			yyVAL.empty = struct{}{}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3108
		{
			yyVAL.empty = struct{}{}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3110
		{
			yyVAL.empty = struct{}{}
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3112
		{
			yyVAL.empty = struct{}{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3114
		{
			yyVAL.empty = struct{}{}
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3116
		{
			yyVAL.empty = struct{}{}
		}
	case 619:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3119
		{
			yyVAL.empty = struct{}{}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3121
		{
			yyVAL.empty = struct{}{}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3123
		{
			yyVAL.empty = struct{}{}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3127
		{
			yyVAL.empty = struct{}{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3129
		{
			yyVAL.empty = struct{}{}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3133
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3137
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3144
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3150
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3154
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3161
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3391
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 837:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3400
		{
			decNesting(yylex)
		}
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3405
		{
			forceEOF(yylex)
		}
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:3410
		{
			forceEOF(yylex)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3414
		{
			forceEOF(yylex)
		}
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:3418
		{
			forceEOF(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
